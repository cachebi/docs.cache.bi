openapi: 3.0.0
info:
  title: Cache Web API v
  description: |
    Cache Technologies api documentation for cache.bi web ecommerce and pos communications. Visit [cache.bi](https://cache.bi) or our full website [cachetech.com.au](https://cachetech.com.au).

    ### POS Custom settings
      Certain settings in POS need to be correctly entered before attempting to use the API interface.  
    #### User-Defined Options  
      <p><code>POS Terminal Settings --> POS Settings --> User-Defined Options</code> (see below table with sample entries)</p>
      ![user-defined](https://cachetech.com.au/files/images/stoplight_images/user-defined.png)  
    #### Global Options  
      <p>Values must be set in <code>Global Options --> Interfaces --> eCommerce</code> (see below example)</p>
      ![ecommerce](https://cachetech.com.au/files/images/stoplight_images/ecommerce.png)  
    #### Customer Type Options  
      <p>Desired customer type used for web customers must also be set in <code>Customer Type</code> User-Defined field with <code>WEB</code> value</p>
      ![customer-type](https://cachetech.com.au/files/images/stoplight_images/customer-type.png)  
  
    <table>
      <tr>
        <td>User-Defined Value</td>
        <td>Setting (eg)</td>
        <td>Purpose</td>
      </tr>
      <tr>
        <td>TIMEZONE</td>
        <td>Australia/Adelaide</td>
        <td>Set POS TZ zone code as per <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" title="TZ Database Name">TZ Database Name</a></td>
      </tr>
      <tr>
        <td>WEBITEMDISCOUNT</td>
        <td>Item Discount 2</td>
        <td>Item discount code for discounted web items</td>
      </tr>
      <tr>
        <td>WEBVOUCHER</td>
        <td>6</td>
        <td>Web Gift Voucher Tender number</td>
      </tr>
      <tr>
        <td>WOOPOS</td>
        <td>1</td>
        <td>Pos Terminal used for orders</td>
      </tr>
    </table>
    ### POS Custom Items  
      For Web Orders to print and display correctly, the API requires specific stock items to exist in the stock item list. Please see below for setup  
    #### TEXT item  
      - Code: `TEXT`  
      - Description: `OPEN STOCK ITEM`  
      - [x] Non-Accumulating  
      - [ ] Stock Control
      - [x] Print to Reciept Printer  
    #### INST item  
      - Code: `INST`  
      - Description: `OPEN STOCK ITEM` 
      - [x] Non-Accumulating  
      - [ ] Stock Control
      - [x] Print to Reciept Printer 
      - [x] Instruction
  termsOfService: 'https://cachetech.com.au/terms/'
  contact:
    url: www.cachetech.com.au
    name: Roger Close
    email: roger@cpinet.com.au
  version: 1.0.39
  license:
    name: Commercial
    url: 'https://cachetech.com.au/license/'
servers:
  - url: 'https://web.api.cache.bi/api'
    description: Base url to connect to web REST services
tags:
  - name: customer
    description: Basic Customer operations for web stores
  - name: voucher
    description: Basic operations for gift vouchers for web stores
  - name: webstore
    description: Basic operations for web stores
    externalDocs:
      description: Find out more
      url: 'https://docs.cache.bi'
paths:
  /customer:
    post:
      tags:
        - customer
      summary: Create Customer
      description: Adds a new Customer to pos system with basic fields.
        <p>It is possible to use any POS field, over and above what is defined within the schema. Most common fields 
        are included here, although there are many more available (eg; userDefinedText1 - 10, dob, dob2 etc).
        <p>Please contact your POS vendor to obtain a full list.  Note that due to limitations of the pos system, it is 
        not possible to include commas in any string field and therefore the request will be rejected if any are included.
      operationId: addCustomer
      requestBody:
        description: Customer Object to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
            examples:
              example-1:
                value:
                  uniqueId: 0
                  code: string
                  lastName: string
                  email: test@example.com
                  type: 1
                  firstName: string
                  scanCode: string
                  phone: string
                  company: string
                  contactNo: string
                  comments1: string
                  comments2: string
                  points: 0
                  discontinue: false
                  asAbove: true
                  masterAccount: string
                  creditLimit: 0
                  address1: string
                  address2: string
                  suburb: string
                  state: str
                  postCode: string
                  deliveryaddress1: string
                  deliveryaddress2: string
                  deliverysuburb: string
                  deliverystate: str
                  deliverypostCode: string
        required: true
      responses:
        '201':
          description: Customer created in pos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerSuccess'
              examples:
                example-1:
                  value:
                    - uniqueId: 0
                      code: W00034
                      email: string
        '400':
          description: Bad input parameter
        '409':
          description: Customer already exists
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: Subscription ID, unique to each business
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
  '/customer/{customerid}/points/{points}':
    put:
      tags:
        - customer
      summary: Update Customer points
      description: 'Update a Customer points in the pos system by the specified amount, may be negative (used points), must be a whole number'
      operationId: updatePoints
      deprecated: true
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
        - name: customerid
          in: path
          description: Customer Id to be updated - must use ID to ensure mapping to correct customer in pos system
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: points
          in: path
          description: Points value (positive or negative) to adjust by
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '201':
          description: Customer points updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerPointsResponse'
              examples:
                example-1:
                  value:
                    - customerId: 54
                      newPointsBalance: 453
        '400':
          description: Bad input parameter
        '409':
          description: Customer ID not found
  '/customer/{customerid}':
    put:
      tags:
        - customer
      summary: Update Customer
      description: |
        Update Customer field values in the pos system.  
        It is not possible to update `UniqueId` (any value will be ignored).  
        Only fields desired to update need to be added to the body.  
        Hidden fields are available to update (contact your pos vender for complete list)
      operationId: updateCustomer
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
        - name: customerid
          in: path
          description: Customer Id to be updated - must use ID to ensure mapping to correct customer in pos system
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Customer Object to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
            examples:
              example-1:
                value:
                  uniqueId: 23
                  code: string
                  lastName: string
                  email: test@example.com
                  type: 1
                  firstName: string
                  scanCode: string
                  phone: string
                  company: string
                  contactNo: string
                  comments1: string
                  comments2: string
                  points: 0
                  discontinue: false
                  asAbove: true
                  masterAccount: string
                  creditLimit: 0
                  address1: string
                  address2: string
                  suburb: string
                  state: str
                  postCode: string
                  deliveryAddress1: string
                  deliveryAddress2: string
                  deliverySuburb: string
                  deliveryState: str
                  deliveryPostcode: string
        required: true
      responses:
        '201':
          description: Customer updated
        '400':
          description: Bad input parameter
        '409':
          description: Customer ID not found
    get:
      tags:
        - customer
      summary: Find Customer by ID
      description: Finds a single customer in pos system
      operationId: findCustomerById
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
        - name: customerid
          in: path
          schema:
            type: integer
          description: Unique Customer ID to find full details of Customer by
          required: true
      responses:
        '200':
          description: Customer found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '400':
          description: Bad input parameter
  '/customer/name/{lastName}':
    get:
      tags:
        - customer
      summary: Find Customer by last name
      description: |
        Find Customers in pos system by last name
        <!-- theme: info -->
          > May return more than one result
      operationId: findCustomerByName
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
        - name: lastName
          in: path
          description: Search string for Customer last name
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Results matching last name
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '400':
          description: Bad input parameter
  '/customer/email/{email}':
    get:
      tags:
        - customer
      summary: Find Customer by email
      description: |
        Find Customers in pos system by email
        <!-- theme: info -->
          > May return more than one result
      operationId: findCustomerByEmail
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
        - name: email
          in: path
          description: Search string for Customer email address
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Results matching Customer email address
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '400':
          description: Bad input parameter
  /customer/all:
    get:
      tags:
        - customer
      summary: Get all Customers
      description: |
        Gets all Customers within pos system. Includes discontinued Customers
        <!-- theme: warning -->
          > Use paged request if there are a large number of customers in database ( >1000 )
      operationId: findAllCustomers
      responses:
        '200':
          description: Search results of all Customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '400':
          description: Bad input parameter
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
  '/customer/all/{startId}/{quantity}':
    get:
      tags:
        - customer
      summary: Get all Customers paged
      description: Gets all Customers within pos system starting from id
      operationId: findAllCustomersPaged
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
        - name: startId
          in: path
          description: Start Customer ID
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: quantity
          in: path
          description: Page size in customer numbers
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: Search results of all Customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPaged'
        '400':
          description: Bad input parameter
  '/customer/date/{date}':
    get:
      tags:
        - customer
      summary: Get all Customers by modified date
      description: 'Will return two lists, first contains new customers by date entered, second contains any existing customers that were modified after that date'
      operationId: getCustomersByDate
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
        - name: date
          in: path
          description: 'Search for Customers added or modified after that date (not UTC, date in pos system)'
          required: true
          style: simple
          explode: false
          schema:
            minimum: 1
            type: string
            format: 'date ''2022-08-24%2000:00:00'''
      responses:
        '200':
          description: Customers found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '400':
          description: Bad input parameter
  '/voucher/{code}':
    get:
      tags:
        - voucher
      summary: Find Gift Voucher
      description: |
        Find a Gift Voucher in the pos system with specified code
        Will return <code>code</code> prefixed with <code>GV</code>
      operationId: findVoucher
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
        - name: code
          in: path
          description: Voucher code to be searched for
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Search results matching code
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GiftVoucher'
              examples:
                example-1:
                  value:
                    - code: string
                      site: 0
                      amount: 0
                      date: '2019-08-24T14:15:22Z'
                      dateExpires: '2019-08-24T14:15:22Z'
                      amountRedeemed: 0
                      name: string
                      gvType: 1
                      email: string
        '400':
          description: Bad input parameter
    put:
      tags:
        - voucher
      summary: Update Gift Voucher
      description: Update an existing Gift Voucher in the pos system
      operationId: updateVoucher
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
        - name: code
          in: path
          description: Voucher code to be updated
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Voucher Object to add with updated values
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GiftVoucher'
            examples:
              example-1:
                value:
                  code: string
                  site: 0
                  date: '2019-08-24 14:15:22'
                  dateExpires: '2019-08-24 14:15:22'
                  amount: 0
                  amountRedeemed: 0
                  name: string
                  allowGlobalRedemption: true
                  giftVoucherType: 1
                  emailAddress: string
        required: true
      responses:
        '201':
          description: Voucher updated
        '400':
          description: Bad input parameter
        '409':
          description: Error updating existing voucher
  /vouchers/all:
    get:
      tags:
        - voucher
      summary: Get all Gift Vouchers
      description: Gets all Gift Vouchers in the pos system
      operationId: allVouchers
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
      responses:
        '200':
          description: Search results of all Vouchers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GiftVoucher'
        '400':
          description: Bad input parameter
  /weborder/unpaid:
    post:
      tags:
        - webstore
      summary: Create unpaid Web Order
      description: |
        <p>An order from the web store that the Customer will make payment in store when collecting. Orders will show at the top of POS sales screen as per below image.</p>
        ![Web Order Notify](https://cachetech.com.au/files/images/stoplight_images/web-order-sales-screen.png)  
        <p>Values should be left out if not used. API will insert POS identified values where appropriate.</p>
          <code>`code`</code> element **must be unique** - Using an existing order code that **has not been finalised at POS** will result in the previous order being **overwritten** by the new order!
        <p>Required Body elements</p>  
          <li><code>code</code> identifier of order, usually associated with the web id. Must be **unique**</li>
          <li><code>pos</code> number (int) - used to identify situation unique events.</li>
          <li><code>orderLines</code> object - each line of the order, including `TEXT` lines at top for any name/address</li>
        <p>Optional Body elements</p>
          <li><code>deliveryDate</code> UTC time that order should be ready by. A non-existing value will use "now" (according to Time-Zone of POS)</li>
          <li><code>customerId</code> ID of Customer - 0 will use WGUEST (code) customer. Non-existing ID will **not** assign a Customer</li>
          <li><code>clerkCode</code> number (int) - To override POS set Web Order Clerk to any other Clerk in POS</li>
          <li><code>guestCustomer</code> object -  Address of WGUEST Customer, or name only if not a registered/guest Customer</li>
        <p>A typical, minimal, unpaid Web Order body might look like the below:</p>
          ```json
          {
            "code": "000001",
            "pos": 1,
            "customerId": 0,
            "guestCustomer": {
              "address1": "22 Greenhill Rd",
              "suburb": "WAYVILLE",
              "state": "SA",
              "postCode": "5034",
              "name": "Cache Test"
            },
            "orderLines": [
              {
              "lineType": "ITEM",
              "itemCode": "TEXT",
              "description": "PICK-UP ORDER"
              },
              {
              "lineType": "ITEM",
              "itemCode": "COF00001",
              "description": "CAFE LATTE",
              "quantity": 1,
              "totalPrice": 5.50
              },
              {
              "lineType": "ITEM",
              "itemCode": "INST",
              "description": "> LARGE",
              "quantity": 1,
              "totalPrice": 0.50
              }
            ]
          }
          ```
      operationId: addUnpaidWebOrder
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
      requestBody:
        description: Web Order Object to Add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebOrder'
        required: true
      responses:
        '201':
          description: Order successfully added
        '400':
          description: Failed to insert new order
        '409':
          description: Order already exists
  /weborder/finalised:
    post:
      tags:
        - webstore
      summary: Create finalised Web Order
      description: |
        Web Order that has been fully paid online.
      operationId: addFinalisedWebOrder
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
      requestBody:
        description: Web Order Object to Add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebOrder'
        required: true
      responses:
        '201':
          description: 'Successfully added sale transaction #{posAudit}-{posNumber}'
        '400':
          description: Failed to insert new order
        '406':
          description: 'Failed to accept {paymentMethod}'
        '409':
          description: Order already exists
  /webproducts/all:
    get:
      tags:
        - webstore
      summary: Get all Products
      description: Returns all products in pos system that have been marked as WebStore products
      operationId: getWebProducts
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
      responses:
        '200':
          description: Results of all products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AllWebProducts'
              examples:
                Standard Result:
                  value:
                    - code: string
                      shortDescription: string
                      longDescription: string
                      taxed: true
                      isVariant: true
                      variantMasterCode: string
                      notes: string
        '400':
          description: Bad input parameter
  '/webproducts/all/{startId}/{quantity}':
    get:
      tags:
        - webstore
      summary: Get all Products paged
      description: Returns all products in pos system pagenated that have been marked as WebStore products
      operationId: getWebProductsPaged
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
        - name: startId
          in: path
          description: Start Product ID (Start at 0 as ID's are NOT returned)
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: quantity
          in: path
          description: Page size in Product numbers
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: Results of all products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllWebProductsPaged'
        '400':
          description: Bad input parameter
  /webproducts/prices/all:
    get:
      tags:
        - webstore
      summary: Get all Product prices
      description: 'Returns all products prices in pos system that have been marked as WebStore products, according to Price Levels defined in POS system'
      operationId: getWebProductsPrices
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
      responses:
        '200':
          description: Results of all products pricing values
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AllWebProductPrices'
              examples:
                example-1:
                  value:
                    - code: string
                      priceLevel: 1
                      price: 2.4
        '400':
          description: Bad input parameter
  '/webproducts/prices/{level}':
    get:
      tags:
        - webstore
      summary: Get Product prices by Level
      description: 'Returns all products prices in pos system that have been marked as WebStore products, according to Price Level requested'''
      operationId: getWebProductsPricesByLevel
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
        - name: level
          in: path
          description: Price Level code of product prices to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: Results of all products pricing values
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AllWebProductPrices'
              examples:
                Standard Response:
                  value:
                    - code: string
                      priceLevel: 1
                      price: 2.4
        '400':
          description: Bad input parameter
  /webproducts/quantity/all:
    get:
      tags:
        - webstore
      summary: Get all Product quantities
      description: Returns all products inventory levels in pos system that have been marked as WebStore products
      operationId: getWebProductsQuantities
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
      responses:
        '200':
          description: Results of all products stock levels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AllWebProductQuantities'
              examples:
                example-1:
                  value:
                    - location: 1
                      code: string
                      quantity: 34
        '400':
          description: Bad input parameter
  '/webproducts/quantity/{location}':
    get:
      tags:
        - webstore
      summary: Get all Product quantities by Location
      description: Returns all products inventory levels in pos system that have been marked as WebStore products from specific Location
      operationId: getWebProductsQuantitiesByLocation
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
        - name: location
          in: path
          description: Location code of product quantities to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: Results of all products stock levels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AllWebProductQuantities'
              examples:
                Standard Response:
                  value:
                    - location: 1
                      code: string
                      quantity: 34
        '400':
          description: Bad input parameter
  /webproducts/specialprices/all:
    get:
      tags:
        - webstore
      summary: Get all Product special prices
      description: Returns all products special prices in pos system that have been marked as WebStore products
      operationId: getWebProductsSpecialPrices
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
      responses:
        '200':
          description: Results of all products special pricing values
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebProductSpecialPrices'
              examples:
                Promotion:
                  value:
                    - code: WEBITEM1
                      specialCode: 34
                      special: PROMOTION
                      quantityToTrip: 2
                      deal: OVERALL_PRICE
                      value: '4.00'
                      dateStart: '2019-08-24 04:15:22'
                      dateEnd: '2020-08-24 04:15:22'
        '400':
          description: Bad input parameter
  '/webproduct/{code}':
    get:
      tags:
        - webstore
      summary: Get Product by code
      description: Return product in pos system with specified code
      operationId: getWebProduct
      parameters:
        - schema:
            type: string
            format: UUID
          in: header
          name: X-CBI-BUSINESS-SUBSCRIPTION-ID
          description: 'Subscription ID as given by cache.bi portal, unique to each business'
          required: true
        - schema:
            type: string
            format: UUID
          in: header
          name: X-API-KEY
          description: Unique API KEY generated by cache.bi portal
          required: true
        - name: code
          in: path
          description: WebProduct code to be searched for
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Search results matching code
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebProduct'
              examples:
                example-1:
                  value:
                    - code: CD2401
                      shortDescription: Some Sample Product
                      longDescription: A very long description of the sample product
                      taxed: true
                      isVariant: false
                      variantMasterCode: 'null'
                      notes: 'null'
                      prices:
                        - level: 1
                          price: 20
                      quantity:
                        - location: 1
                          quantity: 35
                        - location: 2
                          quantity: 0
        '400':
          description: Bad input parameter
components:
  schemas:
    Customer:
      type: object
      description: |
        Customer object containing fields associated with a POS Customer.
      x-examples:
        Minimum Field New Customer:
          code: W000076
          lastName: King
        Recommended New Art Customer:
          code: W000076
          lastName: King
          email: test@example.com
          firstName: Sparrow
          address1: 22 Greenhill Rd
          suburb: Wayville
          state: SA
          postCode: '5034'
          userDefinedText1: '865482'
      properties:
        uniqueId:
          type: integer
          description: |
            #### The unique identifier of a Customer
            <!-- theme: info -->
              > Ignored in `POST` or `PUT` requests. Returned on all `GET` and `POST` requests.
            POS may use same email for multiple accounts, or change email/code of a Customer.  
            The `uniqueId` is provided as part of the response to creating a Customer through this api or by searching or requesting 
            full Customer list.
        code:
          maxLength: 10
          minLength: 1
          type: string
          description: |
            #### POS Code for customer  
            <!-- theme: info -->
              > **Required** only on `POST` requests. Returned on all `GET` requests.  
            - Must be **unique**. If code supplied already exists a `Conflict in parameter - Customer code: {code} already exists 
              as Customer code for Customer ID: #` error will be returned  
            - **Special characters** will result in `Bad input parameter - customerCode must not contain special character` error  
            - **Leading numeric 0** will result in `Bad input parameter - customerCode index 0 must not be numeric 0` error
        lastName:
          maxLength: 30
          minLength: 1
          type: string
          description: |
            #### Customer last name  
            <!-- theme: info -->
              > **Required** only on `POST` requests. Returned on all `GET` requests.
        email:
          maxLength: 50
          type: string
          description: |
            #### Customer email address  
            - May return `Bad input parameter - Customer email: {email} does not appear to be a valid email, or does not pass spam check`
              if API flags as spam.
          example: test@example.com
        type:
          minimum: 1
          type: integer
          description: |
            #### Default Type
            - Defined in Customer Type within User-Defined in POS System. Leaving type out will result in default type defined there.
            Override with value between 1 - 9999 to NOT use the system default.
        firstName:
          maxLength: 15
          type: string
        scanCode:
          maxLength: 13
          type: string
          description: |
            #### POS scan code or other unique code for customer   
            - Must be **unique**.  
            - If `scanCode` exists as a Customer Code or scan code a `Conflict in parameter - Customer scan code: {scanCode} already exists as Customer code 
              for Customer ID: #` error will be returned.  
            - If `scanCode` exists as a Stock Item Code `Conflict in parameter - Customer scan code: {scanCode} already exists as Stock Code
               for Stock Item: {code}` error will be returned.
        phone:
          maxLength: 20
          minLength: 1
          type: string
        company:
          maxLength: 40
          type: string
        contactNo:
          maxLength: 20
          type: string
        comments1:
          maxLength: 50
          type: string
        comments2:
          maxLength: 50
          type: string
        points:
          type: integer
          format: int32
          default: 0
        discontinue:
          type: boolean
          default: false
        asAbove:
          type: boolean
          default: true
          description: 'Assigns the standard address as also the delivery address, leave delivery address blank and assign asAbove as true if delivery address is not different to customer address'
        masterAccount:
          maxLength: 16
          type: string
        creditLimit:
          type: number
          format: double
          description: |
            Customer credit limit.      
            <!-- theme: warning -->
            > `POST` values must be integers, `GET` responses will be doubles.
          default: 0
        address1:
          type: string
          maxLength: 35
        address2:
          type: string
          maxLength: 35
        suburb:
          type: string
          maxLength: 35
        state:
          type: string
          maxLength: 3
        postCode:
          type: string
          maxLength: 10
        deliveryAddress1:
          type: string
          maxLength: 35
        deliveryAddress2:
          type: string
          maxLength: 35
        deliverySuburb:
          type: string
          maxLength: 35
        deliveryState:
          type: string
          maxLength: 3
        deliveryPostcode:
          type: string
          maxLength: 10
      required:
        - code
        - lastName
    CustomerPaged:
      type: object
      properties:
        Customer:
          type: array
          items:
            $ref: '#/components/schemas/Customer'
        PagingMeta:
          $ref: '#/components/schemas/PagingMeta'
    GiftVoucher:
      type: object
      properties:
        code:
          maxLength: 16
          type: string
          description: |
            <!-- theme: info -->
            > #### Prefix of "GV" will be automatically added
        site:
          maximum: 99
          type: integer
          description: Assigning as 0 will indicate gift voucher is redeemable at all sites (AllowGlobalRedemption = true)
          default: 0
        amount:
          type: number
          format: decimal
        date:
          type: string
          format: date-time
          description: 'Override of system datetime now. Date time of voucher purchased, in UTC time, will be converted to time-zone pos is in'
        dateExpires:
          type: string
          format: date-time
          description: 'Override of system Type1 Gift Voucher Expiry. Date time of voucher expiry, in UTC time, will be converted to time-zone pos is in'
        amountRedeemed:
          type: number
          format: decimal
        name:
          maxLength: 30
          type: string
        gvType:
          maximum: 99
          minimum: 1
          type: integer
        email:
          maxLength: 30
          type: string
      required:
        - code
      x-examples:
        Standard:
          code: '9846573893746'
          site: 0
          amount: 50
          date: '2019-08-24 14:15:22'
          dateExpires: '2022-08-24 14:15:22'
          amountRedeemed: 0
          name: Dr Strange
          gvType: 1
          email: drstrange@gmail.com
    WebOrder:
      type: object
      x-examples:
        Guest Web Customer:
          code: 6203
          pos: 1
          customerId: 0
          guestCustomer:
            address1: 22 Greenhill Rd
            suburb: Wayville
            state: SA
            postCode: 5034
            name: King Bore
          orderPayment:
            paymentAmt: 19.95
            paymentMethod: WEB
          orderLines:
            type: ITEM
            itemCode: PUM500
            description: PUMICE POWDER 500G
            quantity: 1
            totalPrice: 19.95
        Registered Customer:
          code: 6204
          pos: 1
          customerId: 34
          orderPayment:
            pointsEarned: 54
            paymentAmt: 54.9
            paymentMethod: WEB
          orderLines:
            - type: ITEM
              itemCode: PUM500
              description: PUMICE POWDER 500G
              quantity: 1
              totalPrice: 19.95
            - type: ITEM
              itemCode: PUM1000
              description: PUMICE POWDER 1Kg
              quantity: 1
              totalPrice: 34.95
        Registered Customer Points Spend:
          code: 6204
          pos: 1
          customerId: 34
          orderPayment:
            pointsEarned: 54
            pointsRedeemed: 5500
            paymentAmt: 54.9
            paymentMethod: POINTS
          orderLines:
            - type: ITEM
              itemCode: PUM500
              description: PUMICE POWDER 500G
              quantity: 1
              totalPrice: 19.95
            - type: ITEM
              itemCode: PUM1000
              description: PUMICE POWDER 1Kg
              quantity: 1
              totalPrice: 34.95
        Cash Customer Delivery:
          code: 6203
          pos: 1
          guestCustomer:
            address1: 22 Greenhill Rd
            suburb: Wayville
            state: SA
            postCode: 5034
            name: King Bore
          orderPayment:
            paymentAmt: 19.95
            paymentMethod: WEB
          orderLines:
            type: ITEM
            itemCode: PUM500
            description: PUMICE POWDER 500G
            quantity: 1
            totalPrice: 19.95
        Cash Customer Pick-Up:
          code: 6203
          pos: 1
          guestCustomer:
            name: King Bore
          orderPayment:
            paymentAmt: 19.95
            paymentMethod: WEB
          orderLines:
            type: ITEM
            itemCode: PUM500
            description: PUMICE POWDER 500G
            quantity: 1
            totalPrice: 19.95
      properties:
        code:
          type: string
          description: 'Web Order code or reference number, system will prefix with "WEB ORDER ". Suggested to use a code unique to web system to allow cross-referencing/debugging'
        pos:
          type: integer
          description: Pos number to put the sale against. Pos number MUST exist in POS Terminal settings.
        deliveryDate:
          type: string
          format: date-time
          description: 'Date that the finished order is to be available in UTC time, will be converted to time-zone pos is in.'
        customerId:
          type: integer
          description: 'Assigning as 0 will use non-registered customer (Guest) - POS will create if not exists, pos code of WGUEST''. Any other number must be of the id of customer in POS system (NOT code).'
        clerkCode:
          type: integer
          description: 'Will assign automatically as designated Web Store clerk in POS, can override using desired clerk code here.'
        guestCustomer:
          $ref: '#/components/schemas/GuestCustomer'
        orderPayment:
          type: array
          description: Payment lines broken into payment methods (total is part payable in multiple tender types) - NOT REQUIRED for /weborder/unpaid
          items:
            $ref: '#/components/schemas/OrderPayment'
        orderedDate:
          type: string
          format: date-time
          description: |
            <!-- theme: warning -->
              > Use of this will affect financials.  
              > Removed from v1.0.25 by way of ignoring any value here.  
              > API will always use POS time of successful insertion of order.
            Date that order takes place, override for system generated "now" -  in UTC time, will be converted to time-zone pos is in
          deprecated: true
        orderLines:
          type: array
          description: Line by line of order. Instruction items must follow an Item line. Text may be anywhere
          items:
            $ref: '#/components/schemas/OrderLines'
      required:
        - pos
        - orderPayment
        - orderLines
    OrderPayment:
      type: object
      description: |
        ### OrderPayment - Tender Types and Amounts of a finalised transaction
        Orders may be paid entirely by one method, or by using several methods. So long as the cumulative total is equal to the total amount of `OrderLines` `amount` value.  
        <!-- theme: info -->
          > #### Payment Method Options 
          > Whilst it is possible to use the exact Tender value from POS (T1...T18) it is recommended to use the preset values that are defined using User-Defined or Gloabl Option Settings in POS rather than the direct value.
          > - `WEB` Will use the value assigned as "Web Tender"
          > - `POINTS` Will use POS set (in Global Options) points nominated Tender
          > - `VOUCHER` Will use User-Defined value for Web Voucher Tender
          > - `ACCOUNT` Will use the POS set Account Tender (will only allow tendering if credit is available on account along with the Customer being an Account Type Customer)
          > Using the above preset values ensure that nuances with each tender is followed (eg; `ACCOUNT` will check for available credit etc)  
        The body of the request only needs the values that are required for each Payment Method.
      x-examples:
        Gift Voucher Payment:
          OrderPayment:
            - paymentAmt: 20.95
              paymentMethod: VOUCHER
              code: GV9045763542867
        Online Payment:
          OrderPayment:
            - paymentAmt: 20.95
              paymentMethod: WEB
        Points Payment:
          OrderPayment:
            - pointsRedeemed: 2095
              paymentAmt: 20.95
              paymentMethod: POINTS
        Split Payment:
          OrderPayment:
            - pointsEarned: 34
              paymentAmt: 34
              paymentMethod: WEB
            - pointsRedeemed: 5000
              paymentAmt: 50
              paymentMethod: POINTS
        Account Payment:
          OrderPayment:
            - paymentAmt: 20.95
              paymentMethod: ACCOUNT
      properties:
        pointsEarned:
          type: number
          format: integer
          description: Number of points earned in sale
        pointsRedeemed:
          type: number
          format: integer
          description: Number of points redemeed in sale
        paymentAmt:
          type: number
          format: double
          description: Amount tendered by payment method
        paymentMethod:
          type: string
          description: 'Tender used to pay, WEB, POINTS will use the pos system set web/points tender, VOUCHER for gift voucher, ACCOUNT for customers that allow credit (must have balance less than credit limit set in POS)'
          enum:
            - WEB
            - POINTS
            - VOUCHER
            - ACCOUNT
        code:
          type: string
          description: 'Gift voucher code used for payment, including prefix (''GV'')'
      required:
        - paymentAmt
        - paymentMethod
    OrderLines:
      type: object
      x-examples:
        Item Order:
          lineType: ITEM
          itemCode: I45-JG
          description: Canvas Item size 45
          quantity: 2
          totalPrice: 45.8
        New Gift Voucher:
          lineType: VOUCHER
          itemCode: WB09456983493
          description: WEB GIFT VOUCHER
          totalPrice: 50
          gvSite: 0
          gvExpiryDays: 1096
          gvEmail: test@example.com.au
          gvName: George Test
        Free Type Text:
          lineType: TEXT
          description: That line above was a gift voucher
        Discount:
          lineType: DISCOUNT
          totalPrice: -1.33
      description: 'Lines of the order, containing items sold along with codes, quantities and pricing. Also used for free text within the transaction and selling of a Gift Voucher and giving an item discount (pertains to item in line above the discount)'
      properties:
        lineType:
          type: string
          format: 'enum [ITEM, INSTRUCTION, TEXT, VOUCHER, DISCOUNT]'
          description: |
            `ITEM`: A product found on the WebProduct list of items  
            `INSTRUCTION`: A product found on the WebProduct list of items that is instructable to the `ITEM` in line above it  
            `TEXT`: Instructive text  
            `VOUCHER`: A gift voucher  
            `DISCOUNT`: A discount relating to the item of the line above it
          enum:
            - ITEM
            - INSTRUCTION
            - TEXT
            - VOUCHER
            - DISCOUNT
        itemCode:
          type: string
          description: |
            Dependant on `lineType` used:  
              `ITEM` <span style="color:red">required</span> - POS code of product (MUST exist in WebProduct)  
              `VOUCHER` <span style="color:red">required</span> - New Gift Voucher code
              All other `lineTypes` do not require this feild and should be left out (see examples)
        description:
          type: string
          maxLength: 30
          description: |
            Dependant on `lineType` used:  
              `ITEM` <span style="color:red">required</span> - POS description of product (preferable to use value in WebProduct so as to match POS internal descriptions)  
              `VOUCHER` <span style="color:red">required</span> - A Gift Voucher description, to suit type of voucher in WebStore  
              `TEXT` <span style="color:red">required</span> - Free type text (must be an `ITEM` `lineType` above to ensure prints to kitchen printers)
        quantity:
          type: number
          format: decimal
        totalPrice:
          type: number
          format: decimal
          description: The TOTAL price of all items within the sale(quantity * unit price)
        orderedTime:
          type: string
          format: date-time
          description: 'If different to original order (not used currently) in UTC time, will be converted to time-zone pos is in'''
        gvSite:
          type: integer
          description: Override default value of 0 (redeemable at all sites) for a new gift voucher
        gvDate:
          type: string
          description: Override "now" time for timezone that pos terminal is in. Must be in UTC time
        gvExpiryDays:
          type: string
          description: Override default value of 1096 or pos set value of voucher type 1
        gvType:
          type: integer
          maximum: 20
          description: 'Type number of gift voucher, overrides the default of 1 (1 - 20)'
        gvEmail:
          type: string
          description: Override Customer email or assign if no email for customer exists.
        gvName:
          type: string
          description: 'Override Customer/Guest name or assign as a gifted voucher (the TO: field of a gift voucher).'
      required:
        - lineType
    GuestCustomer:
      type: object
      properties:
        address1:
          type: string
          maxLength: 35
          description: Delivery address1 for Guest Customer
        address2:
          type: string
          maxLength: 35
          description: Delivery address2 for web Guest Customer
        suburb:
          type: string
          maxLength: 35
          description: Suburb for web Guest Customer
        state:
          type: string
          maxLength: 3
          description: State for web Guest Customer
        postCode:
          type: string
          maxLength: 10
          description: Post Code for web Guest Customer
        name:
          type: string
          maxLength: 35
          description: Name of web Guest Customer and in-store (Pick-Up/Order-In) customers (through a customer facing app)
    AllWebProducts:
      type: object
      properties:
        code:
          maxLength: 16
          type: string
        shortDescription:
          maxLength: 30
          type: string
        longDescription:
          maxLength: 100
          type: string
        taxed:
          type: boolean
        isVariant:
          type: boolean
        variantMasterCode:
          type: string
        notes:
          type: string
    AllWebProductsPaged:
      type: object
      properties:
        AllWebProducts:
          type: array
          items:
            $ref: '#/components/schemas/AllWebProducts'
        PagingMeta:
          $ref: '#/components/schemas/PagingMeta'
    AllWebProductPrices:
      type: object
      properties:
        code:
          maxLength: 16
          type: string
          description: POS code of product
        priceLevel:
          type: number
          format: integer
          maximum: 12
          description: POS defined Price Level (1 - 12)
        price:
          type: number
          format: decimal
          description: Price of product set in POS system at specified Price Level
    AllWebProductQuantities:
      type: object
      properties:
        code:
          maxLength: 16
          type: string
          description: POS code of product
        location:
          type: integer
          format: int32
        quantity:
          type: number
          format: decimal
    WebProduct:
      type: object
      properties:
        code:
          maxLength: 16
          type: string
        shortDescription:
          maxLength: 30
          type: string
        longDescription:
          maxLength: 100
          type: string
        taxed:
          type: boolean
        isVariant:
          type: boolean
        variantMasterCode:
          type: string
        notes:
          type: string
        prices:
          type: array
          items:
            $ref: '#/components/schemas/WebProductPrices'
        quantity:
          type: array
          items:
            $ref: '#/components/schemas/WebProductQuantities'
    WebProductPrices:
      type: object
      properties:
        priceLevel:
          type: number
          format: integer
          maximum: 12
          description: POS defined Price Level (1 - 12)
        price:
          type: number
          format: decimal
          description: Price of product set in POS system at specified Price Level
    WebProductQuantities:
      type: object
      properties:
        location:
          type: integer
          format: int32
        quantity:
          type: number
          format: decimal
    WebProductSpecialPrices:
      type: object
      properties:
        code:
          maxLength: 16
          type: string
          description: POS code of product
        special:
          type: string
          enum:
            - SPECIAL_PRICE
            - PROMOTION
          description: POS defined type of special price
        specialCode:
          type: number
          format: integer
          description: 'POS defined code (sequential number system generated by Promotions, Special prices User-Defined)'
        quantityToTrip:
          type: number
          format: integer
          default: 1
          description: Number of items needed to be within sale to cause special price to be used
        deal:
          type: string
          enum:
            - OVERALL_PRICE
            - DOLLAR_DISCOUNT
            - PERCENT_DISCOUNT
            - PRICE_PER
            - BONUS_PRODUCT
            - CHEAPEST_ITEM_PERCENT_DISCOUNT
            - EXPENSIVE_ITEM_PERCENT_DISCOUNT
            - DOLLAR_OFF_TOTAL
          default: OVERALL_PRICE
          description: How the special price is applied
        value:
          oneOf:
            - type: number
              format: decimal
              description: Value that the special is. Can be a price (in decimal format)
            - type: string
              description: Product Code in case of BONUS_PRODUCT
        dateStart:
          type: string
          format: date-time
          description: Start date and time of the special
        dateEnd:
          type: string
          format: date-time
        timeStart:
          type: string
          format: time
          description: Start time of the special when implementing 'recurring'
        timeEnd:
          type: string
          format: time
          description: End time of the special when implementing 'recurring'
        recurring:
          type: string
          enum:
            - SESSION
            - DAILY
            - DAYS_OF_WEEK
            - WEEKLY
            - MONTHLY
            - YEARLY
          description: 'Used to set DAILY, WEEKLY, MONTHLY, YEARLY recurrence type. DAYS_OF_WEEK to define specific day/days of week'
        interval:
          type: array
          items:
            $ref: '#/components/schemas/Intervals'
      x-examples:
        Promotion:
          code: WEBITEM1
          specialCode: 34
          special: PROMOTION
          quantityToTrip: 2
          deal: OVERALL_PRICE
          value: '4.00'
          dateStart: '2019-08-24 04:15:22'
          dateEnd: '2020-08-24 04:15:22'
        Special Price:
          code: WEBITEM1
          specialCode: 100
          special: SPECIAL
          value: '2.20'
          dateStart: '2019-08-24 04:15:22'
          dateEnd: '2020-08-24 04:15:22'
        Promotion Bonus Item:
          code: WEBITEM1
          special: PROMOTION
          quantityToTrip: 2
          deal: BONUS_PRODUCT
          value: '4.00'
          dateStart: '2019-08-24 04:15:22'
          dateEnd: '2020-08-24 04:15:22'
    Intervals:
      type: object
      properties:
        recurring:
          type: string
          enum:
            - SESSION
            - DAILY
            - DAYS_OF_WEEK
            - WEEKLY
            - MONTHLY
            - YEARLY
            - CUSTOM
        value:
          anyOf:
            - type: string
            - type: integer
            - type: array
              items: {}
          description: |
            Associated value for recurring occurrence of.
            It is possible to "mix and match" or have multiples of same type.  
            
            A `SESSION` (1 - 5) as custom defined in the POS system  
            Valid values; ```S1, S2, S3, S4, S5```  
            
            A `DAILY` value allows defining the special to occur a set # of recurring days, a value of 1 means each day, a value of 2 means every 2nd day and so on.  
            Valid values; ```D1, D2, D3, D4, D5, D6...```  
            
            A `DAYS_OF_WEEK` value allows to define set day or days of the week that the special will apply.  
            Valid values; ```MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY```  
            
            A `WEEKLY` value allows defining the special to occur a set # of recurring weeks, a value of 1 means every week from start date, a value of 2 means every 2nd week from start date. Usually used in conjuction with `DAYS_OF_WEEK`.  
            Valid values; ```W1, W2, W3, W4, W5, W6...```  
            
            A `MONTHLY` value allows defining the special to occur a set # of recurring months, a value of 1 means every week from start date, a value of 2 means every 2nd week from start date. Usually used in conjuction with `DAYS_OF_WEEK` and/or `WEEKLY`.  
            Valid values; ```M1, M2, M3, M4, M5, M6, M7, M7, M8, M9, M10, M11, M12```  
            
            A `YEARLY` value allows defining the special to occur a set # of recurring years, a value of 1 means every week from start date, a value of 2 means every 2nd week from start date. Usually used in conjuction with `DAYS_OF_WEEK` and/or `WEEKLY`, and/or `MONTHLY`.  
            Valid values; ```Y1, Y2, Y3, Y4, Y5, Y6...```  
            
            A `CUSTOM` defined value allows specific pre-defined (by cache.bi) intervals, usually days of significance.  
            Valid values; ```FIRST_OF_MONTH, LAST_OF_MONTH, PUBLIC_HOLIDAYS, LONG_WEEKENDS, CHRISTMAS_EVE, CHRISTMAS_DAY, NEW_YEARS_EVE, NEW_YEARS_DAY```
    CustomerSuccess:
      type: object
      x-examples:
        Standard:
          uniqueId: 53
          code: W0000342
          email: test@example.com.au
      properties:
        uniqueId:
          type: integer
        code:
          type: string
        email:
          type: string
    CustomerPointsResponse:
      type: object
      x-examples:
        Standard:
          customerId: 54
          newPointsBalance: 435
      properties:
        customerId:
          type: integer
        newPointsBalance:
          type: integer
    PagingMeta:
      type: object
      x-examples:
        Standard Response:
          total: 5874
          startId: 0
          endId: 1025
          fetchQuantity: 1000
      properties:
        total:
          type: integer
          description: Total number of items within page pool
        startId:
          type: integer
          description: Start ID that was requested
        endId:
          type: integer
          description: Final ID in returned page (to use in next page request start ID)
        fetchQuantity:
          type: integer
          description: Total number of items returned (if less than the requested quantity then completed)
  securitySchemes:
    key:
      type: apiKey
      name: X-API-Key
      in: header
      description: API Key as given by cache.bi administrator
    subId:
      type: apiKey
      name: X-CBI-BUSINESS-SUBSCRIPTION-ID
      in: header
      description: Client subscription UUID
