{
  "openapi": "3.1.0",
  "info": {
    "title": "Cache Web API",
    "description": "Cache Technologies api documentation for cache.bi web ecommerce and pos communications. Visit [cache.bi](https://cache.bi) or our full website [cachetech.com.au](https://cachetech.com.au).\n\n### Custom settings MUST be applied in POS system database\nCertain settings in POS need to be currectly entered before attempting to use the API interface. See below.\n\n\n#### User-Defined Section  \nCreate new values in `POS Terminal Settings --> POS Settings --> User-Defined Options` (see below examples)\n![user-defined](https://cachetech.com.au/files/images/stoplight_images/user-defined.png)  \n\n| User-Defined Value  | Setting (eg)       |Purpose                                      |\n|---------------------|--------------------|---------------------------------------------|\n| TIMEZONE            | Australia/Adelaide |Set POS TZ zone code as per [TZ Database Name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) |\n| WEBITEMDISCOUNT     | Item Discount 2    |Item discount code for discounted web items  |\n| WEBVOUCHER          | 6                  |Web Gift Voucher Tender number ONLY          |\n| WOOPOS              | 1                  |In development...                 |  \n\n\n#### Global Options Section \nValues must be set in `Global Options --> Interfaces --> eCommerce` (see below example)  \n![ecommerce](https://cachetech.com.au/files/images/stoplight_images/ecommerce.png)  \n\n#### Customer Type Section \nDesired customer type used for web customers must also be set in `Customer Type` User-Defined field with `WEB` value (see below example)\n![customer-type](https://cachetech.com.au/files/images/stoplight_images/customer-type.png)\n\n\n### Custom stock items MUST be created in POS system database\nFor Web Orders to print and display correctly, the API requires specific stock items to exist in the stock item list. Please see below for setup  \n\n#### TEXT item  \n- Code: `TEXT`  \n- Description: `OPEN STOCK ITEM` \n- [x] Non-Accumulating  \n- [ ] Stock Control\n- [x] Print to Reciept Printer  \n\n#### INST item  \n- Code: `INST`  \n- Description: `OPEN STOCK ITEM` \n- [x] Non-Accumulating  \n- [ ] Stock Control\n- [x] Print to Reciept Printer \n- [x] Instruction\n",
    "termsOfService": "https://cachetech.com.au/terms/",
    "contact": {
      "url": "https://www.cachetech.com.au",
      "name": "Roger Close",
      "email": "roger@cpinet.com.au"
    },
    "version": "1.0.55",
    "license": {
      "name": "Commercial",
      "url": "https://cachetech.com.au/license/"
    }
  },
  "servers": [
    {
      "url": "https://web.api.cache.bi/api",
      "description": "Base url to connect to web REST services **NOTE Soon to update to /v# instead of /api**"
    }
  ],
  "tags": [
    {
      "name": "customer",
      "description": "Basic Customer operations for web stores"
    },
    {
      "name": "voucher",
      "description": "Basic operations for gift vouchers for web stores"
    },
    {
      "name": "webstore",
      "description": "Basic operations for web stores",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://docs.cache.bi"
      }
    }
  ],
  "paths": {
    "/customer": {
      "post": {
        "tags": [
          "customer"
        ],
        "summary": "Create Customer",
        "description": "Adds a new Customer to pos system with basic fields",
        "operationId": "addCustomer",
        "requestBody": {
          "description": "Customer Object to add",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Customer object containing fields associated with a POS Customer.\n\nHidden Values  \nIt is possible to use any field in POS, over and above what is defined below in a `POST` request. Most common fields are included here,\nthough there are many more available (eg; `userDefinedText1 - 10`, `dob`, `dob2` etc). Please contact your POS vender to obtain a full list.\n",
                "properties": {
                  "uniqueId": {
                    "type": "integer",
                    "description": "The unique identifier of a Customer          \nIgnored in `POST` or `PUT` requests. Returned on all `GET` and `POST` requests.\nPOS may use the same email for multiple accounts, or change email/code of a Customer.  \nThe `uniqueId` is provided as part of the response to creating a Customer through this api or by searching or requesting \nfull Customer list.\n"
                  },
                  "code": {
                    "maxLength": 10,
                    "minLength": 1,
                    "type": "string",
                    "description": "#### POS Code for customer  \n\n**Required** only on `POST` requests. Returned on all `GET` requests.  \n- Must be **unique**. If code supplied already exists a `Conflict in parameter - Customer code: {code} already exists \nas Customer code for Customer ID: #` error will be returned  \n- **Special characters** will result in `Bad input parameter - customerCode must not contain special character` error  \n- **Leading numeric 0** will result in `Bad input parameter - customerCode index 0 must not be numeric 0` error\n"
                  },
                  "lastName": {
                    "maxLength": 30,
                    "minLength": 1,
                    "type": "string",
                    "description": "#### Customer last name          \n**Required** only on `POST` requests. Returned on all `GET` requests.\n"
                  },
                  "email": {
                    "maxLength": 50,
                    "type": "string",
                    "description": "#### Customer email address  \n- May return `Bad input parameter - Customer email: {email} does not appear to be a valid email, or does not pass spam check`\nif API flags as spam.\n"
                  },
                  "type": {
                    "minimum": 1,
                    "type": "integer",
                    "description": "#### Default Type\n- Defined in Customer Type within User-Defined in POS System. Leaving type out will result in default type defined there.\nOverride with value between 1 - 9999 to NOT use the system default.\n"
                  },
                  "firstName": {
                    "maxLength": 15,
                    "type": "string"
                  },
                  "scanCode": {
                    "maxLength": 13,
                    "type": "string",
                    "description": "#### POS scan code or other unique code for customer   \n- Must be **unique**.  \n- If `scanCode` exists as a Customer Code or scan code a `Conflict in parameter - Customer scan code: {scanCode} already exists as Customer code \nfor Customer ID: #` error will be returned.  \n- If `scanCode` exists as a Stock Item Code `Conflict in parameter - Customer scan code: {scanCode} already exists as Stock Code\nfor Stock Item: {code}` error will be returned.\n"
                  },
                  "phone": {
                    "maxLength": 20,
                    "minLength": 1,
                    "type": "string"
                  },
                  "company": {
                    "maxLength": 40,
                    "type": "string"
                  },
                  "contactNo": {
                    "maxLength": 20,
                    "type": "string"
                  },
                  "comments1": {
                    "maxLength": 50,
                    "type": "string"
                  },
                  "comments2": {
                    "maxLength": 50,
                    "type": "string"
                  },
                  "points": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                  },
                  "discontinue": {
                    "type": "boolean",
                    "default": false
                  },
                  "asAbove": {
                    "type": "boolean",
                    "default": true,
                    "description": "Assigns the standard address as also the delivery address, leave delivery address blank and assign asAbove as true if delivery address is not different to customer address"
                  },
                  "masterAccount": {
                    "maxLength": 16,
                    "type": "string"
                  },
                  "creditLimit": {
                    "type": "number",
                    "format": "double",
                    "description": "Customer credit limit\n`POST` values must be integers, `GET` responses will be doubles.\n",
                    "default": 0
                  },
                  "address1": {
                    "type": "string",
                    "maxLength": 35
                  },
                  "address2": {
                    "type": "string",
                    "maxLength": 35
                  },
                  "suburb": {
                    "type": "string",
                    "maxLength": 35
                  },
                  "state": {
                    "type": "string",
                    "maxLength": 3
                  },
                  "postCode": {
                    "type": "string",
                    "maxLength": 10
                  },
                  "deliveryAddress1": {
                    "type": "string",
                    "maxLength": 35
                  },
                  "deliveryAddress2": {
                    "type": "string",
                    "maxLength": 35
                  },
                  "deliverySuburb": {
                    "type": "string",
                    "maxLength": 35
                  },
                  "deliveryState": {
                    "type": "string",
                    "maxLength": 3
                  },
                  "deliveryPostcode": {
                    "type": "string",
                    "maxLength": 10
                  }
                },
                "required": [
                  "code",
                  "lastName"
                ]
              },
              "examples": {
                "basic-new-customer": {
                  "value": {
                    "code": "W000001",
                    "lastName": "Smith",
                    "email": "johnsmith@example.com.au",
                    "type": 1,
                    "firstName": "John",
                    "scanCode": "4WE73T2000001",
                    "phone": "0400 123 456",
                    "company": "Test Company",
                    "comments1": "Online Customer",
                    "asAbove": true,
                    "address1": "24 Main Street",
                    "suburb": "Adelaide",
                    "state": "SA",
                    "postCode": "5000"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Customer created in pos",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "x-examples": {
                      "Standard": {
                        "uniqueId": 53,
                        "code": "W0000342",
                        "email": "test@example.com.au"
                      }
                    },
                    "properties": {
                      "uniqueId": {
                        "type": "integer"
                      },
                      "code": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      }
                    }
                  }
                },
                "examples": {
                  "response-success": {
                    "value": [
                      {
                        "uniqueId": 546,
                        "code": "W00034",
                        "email": "customer@mail.com.au"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": [
                    {
                      "status": "Int"
                    },
                    {
                      "message": "String"
                    },
                    {
                      "timeStamp": "String"
                    }
                  ]
                },
                "examples": {
                  "response-comma": {
                    "value": {
                      "status": 400,
                      "message": "Bad input parameter - comma (,) is an invalid character",
                      "timeStamp": "03:05:33"
                    }
                  },
                  "response-empty": {
                    "value": {
                      "status": 400,
                      "message": "Bad input parameter - customerCode must not be empty",
                      "timeStamp": "03:05:33"
                    }
                  },
                  "response-special": {
                    "value": {
                      "status": 400,
                      "message": "Bad input parameter - customerCode must not contain special characters",
                      "timeStamp": "03:05:33"
                    }
                  },
                  "response-toolong": {
                    "value": {
                      "status": 400,
                      "message": "Bad input parameter - Customer firstName: VeryLongNameThatIsTooLong exceeds 15 characters",
                      "timeStamp": "03:05:33"
                    }
                  },
                  "response-email": {
                    "value": {
                      "status": 400,
                      "message": "Bad input parameter - Customer email: i.am.from.a.spam.account.mail.address@mail.ru does not appear to be a valid email, or does not pass spam check",
                      "timeStamp": "03:05:33"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Customer already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": [
                    {
                      "status": "Int"
                    },
                    {
                      "message": "String"
                    },
                    {
                      "timeStamp": "String"
                    }
                  ]
                },
                "examples": {
                  "response-exists": {
                    "value": {
                      "status": 409,
                      "message": "Conflict in parameter - Customer code: W000000001 already exists as Customer code for Customer ID: 10001",
                      "timeStamp": "03:05:33"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          }
        ]
      }
    },
    "/customer/{customerid}/points/{points}": {
      "put": {
        "tags": [
          "customer"
        ],
        "summary": "Update Customer points",
        "description": "Update a Customer points in the pos system by the specified amount, may be negative (used points), must be a whole number",
        "operationId": "updatePoints",
        "deprecated": true,
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          },
          {
            "name": "customerid",
            "in": "path",
            "description": "Customer Id to be updated - must use ID to ensure mapping to correct customer in pos system",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "points",
            "in": "path",
            "description": "Points value (positive or negative) to adjust by",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Customer points updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "x-examples": {
                      "Standard": {
                        "customerId": 54,
                        "newPointsBalance": 435
                      }
                    },
                    "properties": {
                      "customerId": {
                        "type": "integer"
                      },
                      "newPointsBalance": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": [
                      {
                        "customerId": 54,
                        "newPointsBalance": 453
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameter"
          },
          "409": {
            "description": "Customer ID not found"
          }
        }
      }
    },
    "/customer/{customerid}": {
      "put": {
        "tags": [
          "customer"
        ],
        "summary": "Update Customer",
        "description": "Update Customer field values in the pos system.      \n\nIt is not possible to update `UniqueId` (any value will be ignored).  \nOnly fields required to update need to be added to the body.  \nHidden fields are available to update (contact your pos vender for complete list)\n",
        "operationId": "updateCustomer",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          },
          {
            "name": "customerid",
            "in": "path",
            "description": "Customer Id to be updated - must use ID to ensure mapping to correct customer in pos system",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Customer Object to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Customer object containing fields associated with a POS Customer.\n\nHidden Values  \nIt is possible to use any field in POS, over and above what is defined below in a `POST` request. Most common fields are included here,\nthough there are many more available (eg; `userDefinedText1 - 10`, `dob`, `dob2` etc). Please contact your POS vender to obtain a full list.\n",
                "properties": {
                  "uniqueId": {
                    "type": "integer",
                    "description": "The unique identifier of a Customer          \nIgnored in `POST` or `PUT` requests. Returned on all `GET` and `POST` requests.\nPOS may use the same email for multiple accounts, or change email/code of a Customer.  \nThe `uniqueId` is provided as part of the response to creating a Customer through this api or by searching or requesting \nfull Customer list.\n"
                  },
                  "code": {
                    "maxLength": 10,
                    "minLength": 1,
                    "type": "string",
                    "description": "#### POS Code for customer  \n\n**Required** only on `POST` requests. Returned on all `GET` requests.  \n- Must be **unique**. If code supplied already exists a `Conflict in parameter - Customer code: {code} already exists \nas Customer code for Customer ID: #` error will be returned  \n- **Special characters** will result in `Bad input parameter - customerCode must not contain special character` error  \n- **Leading numeric 0** will result in `Bad input parameter - customerCode index 0 must not be numeric 0` error\n"
                  },
                  "lastName": {
                    "maxLength": 30,
                    "minLength": 1,
                    "type": "string",
                    "description": "#### Customer last name          \n**Required** only on `POST` requests. Returned on all `GET` requests.\n"
                  },
                  "email": {
                    "maxLength": 50,
                    "type": "string",
                    "description": "#### Customer email address  \n- May return `Bad input parameter - Customer email: {email} does not appear to be a valid email, or does not pass spam check`\nif API flags as spam.\n"
                  },
                  "type": {
                    "minimum": 1,
                    "type": "integer",
                    "description": "#### Default Type\n- Defined in Customer Type within User-Defined in POS System. Leaving type out will result in default type defined there.\nOverride with value between 1 - 9999 to NOT use the system default.\n"
                  },
                  "firstName": {
                    "maxLength": 15,
                    "type": "string"
                  },
                  "scanCode": {
                    "maxLength": 13,
                    "type": "string",
                    "description": "#### POS scan code or other unique code for customer   \n- Must be **unique**.  \n- If `scanCode` exists as a Customer Code or scan code a `Conflict in parameter - Customer scan code: {scanCode} already exists as Customer code \nfor Customer ID: #` error will be returned.  \n- If `scanCode` exists as a Stock Item Code `Conflict in parameter - Customer scan code: {scanCode} already exists as Stock Code\nfor Stock Item: {code}` error will be returned.\n"
                  },
                  "phone": {
                    "maxLength": 20,
                    "minLength": 1,
                    "type": "string"
                  },
                  "company": {
                    "maxLength": 40,
                    "type": "string"
                  },
                  "contactNo": {
                    "maxLength": 20,
                    "type": "string"
                  },
                  "comments1": {
                    "maxLength": 50,
                    "type": "string"
                  },
                  "comments2": {
                    "maxLength": 50,
                    "type": "string"
                  },
                  "points": {
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                  },
                  "discontinue": {
                    "type": "boolean",
                    "default": false
                  },
                  "asAbove": {
                    "type": "boolean",
                    "default": true,
                    "description": "Assigns the standard address as also the delivery address, leave delivery address blank and assign asAbove as true if delivery address is not different to customer address"
                  },
                  "masterAccount": {
                    "maxLength": 16,
                    "type": "string"
                  },
                  "creditLimit": {
                    "type": "number",
                    "format": "double",
                    "description": "Customer credit limit\n`POST` values must be integers, `GET` responses will be doubles.\n",
                    "default": 0
                  },
                  "address1": {
                    "type": "string",
                    "maxLength": 35
                  },
                  "address2": {
                    "type": "string",
                    "maxLength": 35
                  },
                  "suburb": {
                    "type": "string",
                    "maxLength": 35
                  },
                  "state": {
                    "type": "string",
                    "maxLength": 3
                  },
                  "postCode": {
                    "type": "string",
                    "maxLength": 10
                  },
                  "deliveryAddress1": {
                    "type": "string",
                    "maxLength": 35
                  },
                  "deliveryAddress2": {
                    "type": "string",
                    "maxLength": 35
                  },
                  "deliverySuburb": {
                    "type": "string",
                    "maxLength": 35
                  },
                  "deliveryState": {
                    "type": "string",
                    "maxLength": 3
                  },
                  "deliveryPostcode": {
                    "type": "string",
                    "maxLength": 10
                  }
                },
                "required": [
                  "code",
                  "lastName"
                ]
              },
              "examples": {
                "add-delivery": {
                  "value": {
                    "uniqueId": 23,
                    "asAbove": false,
                    "deliveryAddress1": "PO Box 123",
                    "deliverySuburb": "Adelaide",
                    "deliveryState": "SA",
                    "deliveryPostcode": "5000"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Customer updated",
            "content": {
              "string": {
                "schema": {
                  "string": ""
                },
                "example": "Customer updated"
              }
            }
          },
          "400": {
            "description": "Bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "status": "int",
                  "message": "string",
                  "timeStamp": "string"
                },
                "examples": {
                  "field-too-long": {
                    "value": {
                      "status": 400,
                      "message": "Bad input parameter - Customer postCode: 4209654 exceeds 10 characters",
                      "timeStamp": "11:11:00"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Customer ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "status": "int",
                  "message": "string",
                  "timeStamp": "string"
                },
                "examples": {
                  "not-found": {
                    "value": {
                      "status": 409,
                      "message": "Bad input parameter - customerId: 6549855 is invalid or does not match Customer in system",
                      "timeStamp": "11:11:00"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Find Customer by ID",
        "description": "Finds a single customer in pos system",
        "operationId": "findCustomerById",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          },
          {
            "name": "customerid",
            "in": "path",
            "schema": {
              "type": "integer"
            },
            "description": "Unique Customer ID of customer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Customer found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Customer object containing fields associated with a POS Customer.\n\nHidden Values  \nIt is possible to use any field in POS, over and above what is defined below in a `POST` request. Most common fields are included here,\nthough there are many more available (eg; `userDefinedText1 - 10`, `dob`, `dob2` etc). Please contact your POS vender to obtain a full list.\n",
                  "properties": {
                    "uniqueId": {
                      "type": "integer",
                      "description": "The unique identifier of a Customer          \nIgnored in `POST` or `PUT` requests. Returned on all `GET` and `POST` requests.\nPOS may use the same email for multiple accounts, or change email/code of a Customer.  \nThe `uniqueId` is provided as part of the response to creating a Customer through this api or by searching or requesting \nfull Customer list.\n"
                    },
                    "code": {
                      "maxLength": 10,
                      "minLength": 1,
                      "type": "string",
                      "description": "#### POS Code for customer  \n\n**Required** only on `POST` requests. Returned on all `GET` requests.  \n- Must be **unique**. If code supplied already exists a `Conflict in parameter - Customer code: {code} already exists \nas Customer code for Customer ID: #` error will be returned  \n- **Special characters** will result in `Bad input parameter - customerCode must not contain special character` error  \n- **Leading numeric 0** will result in `Bad input parameter - customerCode index 0 must not be numeric 0` error\n"
                    },
                    "lastName": {
                      "maxLength": 30,
                      "minLength": 1,
                      "type": "string",
                      "description": "#### Customer last name          \n**Required** only on `POST` requests. Returned on all `GET` requests.\n"
                    },
                    "email": {
                      "maxLength": 50,
                      "type": "string",
                      "description": "#### Customer email address  \n- May return `Bad input parameter - Customer email: {email} does not appear to be a valid email, or does not pass spam check`\nif API flags as spam.\n"
                    },
                    "type": {
                      "minimum": 1,
                      "type": "integer",
                      "description": "#### Default Type\n- Defined in Customer Type within User-Defined in POS System. Leaving type out will result in default type defined there.\nOverride with value between 1 - 9999 to NOT use the system default.\n"
                    },
                    "firstName": {
                      "maxLength": 15,
                      "type": "string"
                    },
                    "scanCode": {
                      "maxLength": 13,
                      "type": "string",
                      "description": "#### POS scan code or other unique code for customer   \n- Must be **unique**.  \n- If `scanCode` exists as a Customer Code or scan code a `Conflict in parameter - Customer scan code: {scanCode} already exists as Customer code \nfor Customer ID: #` error will be returned.  \n- If `scanCode` exists as a Stock Item Code `Conflict in parameter - Customer scan code: {scanCode} already exists as Stock Code\nfor Stock Item: {code}` error will be returned.\n"
                    },
                    "phone": {
                      "maxLength": 20,
                      "minLength": 1,
                      "type": "string"
                    },
                    "company": {
                      "maxLength": 40,
                      "type": "string"
                    },
                    "contactNo": {
                      "maxLength": 20,
                      "type": "string"
                    },
                    "comments1": {
                      "maxLength": 50,
                      "type": "string"
                    },
                    "comments2": {
                      "maxLength": 50,
                      "type": "string"
                    },
                    "points": {
                      "type": "integer",
                      "format": "int32",
                      "default": 0
                    },
                    "discontinue": {
                      "type": "boolean",
                      "default": false
                    },
                    "asAbove": {
                      "type": "boolean",
                      "default": true,
                      "description": "Assigns the standard address as also the delivery address, leave delivery address blank and assign asAbove as true if delivery address is not different to customer address"
                    },
                    "masterAccount": {
                      "maxLength": 16,
                      "type": "string"
                    },
                    "creditLimit": {
                      "type": "number",
                      "format": "double",
                      "description": "Customer credit limit\n`POST` values must be integers, `GET` responses will be doubles.\n",
                      "default": 0
                    },
                    "address1": {
                      "type": "string",
                      "maxLength": 35
                    },
                    "address2": {
                      "type": "string",
                      "maxLength": 35
                    },
                    "suburb": {
                      "type": "string",
                      "maxLength": 35
                    },
                    "state": {
                      "type": "string",
                      "maxLength": 3
                    },
                    "postCode": {
                      "type": "string",
                      "maxLength": 10
                    },
                    "deliveryAddress1": {
                      "type": "string",
                      "maxLength": 35
                    },
                    "deliveryAddress2": {
                      "type": "string",
                      "maxLength": 35
                    },
                    "deliverySuburb": {
                      "type": "string",
                      "maxLength": 35
                    },
                    "deliveryState": {
                      "type": "string",
                      "maxLength": 3
                    },
                    "deliveryPostcode": {
                      "type": "string",
                      "maxLength": 10
                    }
                  },
                  "required": [
                    "code",
                    "lastName"
                  ]
                },
                "examples": {
                  "returned": {
                    "value": {
                      "uniqueId": 12,
                      "code": "W0003402",
                      "lastName": "Smith",
                      "email": "johnsmith@example.com",
                      "type": 1,
                      "firstName": "John",
                      "scanCode": "W234df432f",
                      "phone": "0400 123 456",
                      "company": "Test Company",
                      "contactNo": "",
                      "comments1": "Web Customer",
                      "comments2": "",
                      "points": 254,
                      "discontinue": false,
                      "asAbove": false,
                      "masterAccount": "",
                      "creditLimit": 0,
                      "address1": "500 Main Street",
                      "address2": "",
                      "suburb": "Adelaide",
                      "State": "SA",
                      "postCode": "5000",
                      "deliveryAddress1": "PO Box 100",
                      "deliveryAddress2": "",
                      "deliverySuburb": "Adelaide",
                      "deliveryState": "SA",
                      "deliveryPostcode": "5000"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Customer ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "status": "int",
                  "message": "string",
                  "timeStamp": "string"
                },
                "examples": {
                  "not-found": {
                    "value": {
                      "status": 409,
                      "message": "Bad input parameter - customerId: 6549855 is invalid or does not match Customer in system",
                      "timeStamp": "11:11:00"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customer/name/{lastName}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Find Customer by last name",
        "description": "Find Customers in pos system by last name\n\nMay return more than one result\n",
        "operationId": "findCustomerByName",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          },
          {
            "name": "lastName",
            "in": "path",
            "description": "Search string for Customer last name",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Results matching last name",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "Customer object containing fields associated with a POS Customer.\n\nHidden Values  \nIt is possible to use any field in POS, over and above what is defined below in a `POST` request. Most common fields are included here,\nthough there are many more available (eg; `userDefinedText1 - 10`, `dob`, `dob2` etc). Please contact your POS vender to obtain a full list.\n",
                    "properties": {
                      "uniqueId": {
                        "type": "integer",
                        "description": "The unique identifier of a Customer          \nIgnored in `POST` or `PUT` requests. Returned on all `GET` and `POST` requests.\nPOS may use the same email for multiple accounts, or change email/code of a Customer.  \nThe `uniqueId` is provided as part of the response to creating a Customer through this api or by searching or requesting \nfull Customer list.\n"
                      },
                      "code": {
                        "maxLength": 10,
                        "minLength": 1,
                        "type": "string",
                        "description": "#### POS Code for customer  \n\n**Required** only on `POST` requests. Returned on all `GET` requests.  \n- Must be **unique**. If code supplied already exists a `Conflict in parameter - Customer code: {code} already exists \nas Customer code for Customer ID: #` error will be returned  \n- **Special characters** will result in `Bad input parameter - customerCode must not contain special character` error  \n- **Leading numeric 0** will result in `Bad input parameter - customerCode index 0 must not be numeric 0` error\n"
                      },
                      "lastName": {
                        "maxLength": 30,
                        "minLength": 1,
                        "type": "string",
                        "description": "#### Customer last name          \n**Required** only on `POST` requests. Returned on all `GET` requests.\n"
                      },
                      "email": {
                        "maxLength": 50,
                        "type": "string",
                        "description": "#### Customer email address  \n- May return `Bad input parameter - Customer email: {email} does not appear to be a valid email, or does not pass spam check`\nif API flags as spam.\n"
                      },
                      "type": {
                        "minimum": 1,
                        "type": "integer",
                        "description": "#### Default Type\n- Defined in Customer Type within User-Defined in POS System. Leaving type out will result in default type defined there.\nOverride with value between 1 - 9999 to NOT use the system default.\n"
                      },
                      "firstName": {
                        "maxLength": 15,
                        "type": "string"
                      },
                      "scanCode": {
                        "maxLength": 13,
                        "type": "string",
                        "description": "#### POS scan code or other unique code for customer   \n- Must be **unique**.  \n- If `scanCode` exists as a Customer Code or scan code a `Conflict in parameter - Customer scan code: {scanCode} already exists as Customer code \nfor Customer ID: #` error will be returned.  \n- If `scanCode` exists as a Stock Item Code `Conflict in parameter - Customer scan code: {scanCode} already exists as Stock Code\nfor Stock Item: {code}` error will be returned.\n"
                      },
                      "phone": {
                        "maxLength": 20,
                        "minLength": 1,
                        "type": "string"
                      },
                      "company": {
                        "maxLength": 40,
                        "type": "string"
                      },
                      "contactNo": {
                        "maxLength": 20,
                        "type": "string"
                      },
                      "comments1": {
                        "maxLength": 50,
                        "type": "string"
                      },
                      "comments2": {
                        "maxLength": 50,
                        "type": "string"
                      },
                      "points": {
                        "type": "integer",
                        "format": "int32",
                        "default": 0
                      },
                      "discontinue": {
                        "type": "boolean",
                        "default": false
                      },
                      "asAbove": {
                        "type": "boolean",
                        "default": true,
                        "description": "Assigns the standard address as also the delivery address, leave delivery address blank and assign asAbove as true if delivery address is not different to customer address"
                      },
                      "masterAccount": {
                        "maxLength": 16,
                        "type": "string"
                      },
                      "creditLimit": {
                        "type": "number",
                        "format": "double",
                        "description": "Customer credit limit\n`POST` values must be integers, `GET` responses will be doubles.\n",
                        "default": 0
                      },
                      "address1": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "address2": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "suburb": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "state": {
                        "type": "string",
                        "maxLength": 3
                      },
                      "postCode": {
                        "type": "string",
                        "maxLength": 10
                      },
                      "deliveryAddress1": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "deliveryAddress2": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "deliverySuburb": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "deliveryState": {
                        "type": "string",
                        "maxLength": 3
                      },
                      "deliveryPostcode": {
                        "type": "string",
                        "maxLength": 10
                      }
                    },
                    "required": [
                      "code",
                      "lastName"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameter"
          }
        }
      }
    },
    "/customer/email/{email}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Find Customer by email",
        "description": "Find Customers in pos system by email\n\nMay return more than one result\n",
        "operationId": "findCustomerByEmail",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          },
          {
            "name": "email",
            "in": "path",
            "description": "Search string for Customer email address",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Results matching Customer email address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "Customer object containing fields associated with a POS Customer.\n\nHidden Values  \nIt is possible to use any field in POS, over and above what is defined below in a `POST` request. Most common fields are included here,\nthough there are many more available (eg; `userDefinedText1 - 10`, `dob`, `dob2` etc). Please contact your POS vender to obtain a full list.\n",
                    "properties": {
                      "uniqueId": {
                        "type": "integer",
                        "description": "The unique identifier of a Customer          \nIgnored in `POST` or `PUT` requests. Returned on all `GET` and `POST` requests.\nPOS may use the same email for multiple accounts, or change email/code of a Customer.  \nThe `uniqueId` is provided as part of the response to creating a Customer through this api or by searching or requesting \nfull Customer list.\n"
                      },
                      "code": {
                        "maxLength": 10,
                        "minLength": 1,
                        "type": "string",
                        "description": "#### POS Code for customer  \n\n**Required** only on `POST` requests. Returned on all `GET` requests.  \n- Must be **unique**. If code supplied already exists a `Conflict in parameter - Customer code: {code} already exists \nas Customer code for Customer ID: #` error will be returned  \n- **Special characters** will result in `Bad input parameter - customerCode must not contain special character` error  \n- **Leading numeric 0** will result in `Bad input parameter - customerCode index 0 must not be numeric 0` error\n"
                      },
                      "lastName": {
                        "maxLength": 30,
                        "minLength": 1,
                        "type": "string",
                        "description": "#### Customer last name          \n**Required** only on `POST` requests. Returned on all `GET` requests.\n"
                      },
                      "email": {
                        "maxLength": 50,
                        "type": "string",
                        "description": "#### Customer email address  \n- May return `Bad input parameter - Customer email: {email} does not appear to be a valid email, or does not pass spam check`\nif API flags as spam.\n"
                      },
                      "type": {
                        "minimum": 1,
                        "type": "integer",
                        "description": "#### Default Type\n- Defined in Customer Type within User-Defined in POS System. Leaving type out will result in default type defined there.\nOverride with value between 1 - 9999 to NOT use the system default.\n"
                      },
                      "firstName": {
                        "maxLength": 15,
                        "type": "string"
                      },
                      "scanCode": {
                        "maxLength": 13,
                        "type": "string",
                        "description": "#### POS scan code or other unique code for customer   \n- Must be **unique**.  \n- If `scanCode` exists as a Customer Code or scan code a `Conflict in parameter - Customer scan code: {scanCode} already exists as Customer code \nfor Customer ID: #` error will be returned.  \n- If `scanCode` exists as a Stock Item Code `Conflict in parameter - Customer scan code: {scanCode} already exists as Stock Code\nfor Stock Item: {code}` error will be returned.\n"
                      },
                      "phone": {
                        "maxLength": 20,
                        "minLength": 1,
                        "type": "string"
                      },
                      "company": {
                        "maxLength": 40,
                        "type": "string"
                      },
                      "contactNo": {
                        "maxLength": 20,
                        "type": "string"
                      },
                      "comments1": {
                        "maxLength": 50,
                        "type": "string"
                      },
                      "comments2": {
                        "maxLength": 50,
                        "type": "string"
                      },
                      "points": {
                        "type": "integer",
                        "format": "int32",
                        "default": 0
                      },
                      "discontinue": {
                        "type": "boolean",
                        "default": false
                      },
                      "asAbove": {
                        "type": "boolean",
                        "default": true,
                        "description": "Assigns the standard address as also the delivery address, leave delivery address blank and assign asAbove as true if delivery address is not different to customer address"
                      },
                      "masterAccount": {
                        "maxLength": 16,
                        "type": "string"
                      },
                      "creditLimit": {
                        "type": "number",
                        "format": "double",
                        "description": "Customer credit limit\n`POST` values must be integers, `GET` responses will be doubles.\n",
                        "default": 0
                      },
                      "address1": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "address2": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "suburb": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "state": {
                        "type": "string",
                        "maxLength": 3
                      },
                      "postCode": {
                        "type": "string",
                        "maxLength": 10
                      },
                      "deliveryAddress1": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "deliveryAddress2": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "deliverySuburb": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "deliveryState": {
                        "type": "string",
                        "maxLength": 3
                      },
                      "deliveryPostcode": {
                        "type": "string",
                        "maxLength": 10
                      }
                    },
                    "required": [
                      "code",
                      "lastName"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameter"
          }
        }
      }
    },
    "/customer/all": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get all Customers",
        "description": "Gets all Customers within pos system. Includes discontinued Customers\n\nUse paged request if there are a large number of customers in database ( >1000 )\n",
        "operationId": "findAllCustomers",
        "responses": {
          "200": {
            "description": "Search results of all Customers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "Customer object containing fields associated with a POS Customer.\n\nHidden Values  \nIt is possible to use any field in POS, over and above what is defined below in a `POST` request. Most common fields are included here,\nthough there are many more available (eg; `userDefinedText1 - 10`, `dob`, `dob2` etc). Please contact your POS vender to obtain a full list.\n",
                    "properties": {
                      "uniqueId": {
                        "type": "integer",
                        "description": "The unique identifier of a Customer          \nIgnored in `POST` or `PUT` requests. Returned on all `GET` and `POST` requests.\nPOS may use the same email for multiple accounts, or change email/code of a Customer.  \nThe `uniqueId` is provided as part of the response to creating a Customer through this api or by searching or requesting \nfull Customer list.\n"
                      },
                      "code": {
                        "maxLength": 10,
                        "minLength": 1,
                        "type": "string",
                        "description": "#### POS Code for customer  \n\n**Required** only on `POST` requests. Returned on all `GET` requests.  \n- Must be **unique**. If code supplied already exists a `Conflict in parameter - Customer code: {code} already exists \nas Customer code for Customer ID: #` error will be returned  \n- **Special characters** will result in `Bad input parameter - customerCode must not contain special character` error  \n- **Leading numeric 0** will result in `Bad input parameter - customerCode index 0 must not be numeric 0` error\n"
                      },
                      "lastName": {
                        "maxLength": 30,
                        "minLength": 1,
                        "type": "string",
                        "description": "#### Customer last name          \n**Required** only on `POST` requests. Returned on all `GET` requests.\n"
                      },
                      "email": {
                        "maxLength": 50,
                        "type": "string",
                        "description": "#### Customer email address  \n- May return `Bad input parameter - Customer email: {email} does not appear to be a valid email, or does not pass spam check`\nif API flags as spam.\n"
                      },
                      "type": {
                        "minimum": 1,
                        "type": "integer",
                        "description": "#### Default Type\n- Defined in Customer Type within User-Defined in POS System. Leaving type out will result in default type defined there.\nOverride with value between 1 - 9999 to NOT use the system default.\n"
                      },
                      "firstName": {
                        "maxLength": 15,
                        "type": "string"
                      },
                      "scanCode": {
                        "maxLength": 13,
                        "type": "string",
                        "description": "#### POS scan code or other unique code for customer   \n- Must be **unique**.  \n- If `scanCode` exists as a Customer Code or scan code a `Conflict in parameter - Customer scan code: {scanCode} already exists as Customer code \nfor Customer ID: #` error will be returned.  \n- If `scanCode` exists as a Stock Item Code `Conflict in parameter - Customer scan code: {scanCode} already exists as Stock Code\nfor Stock Item: {code}` error will be returned.\n"
                      },
                      "phone": {
                        "maxLength": 20,
                        "minLength": 1,
                        "type": "string"
                      },
                      "company": {
                        "maxLength": 40,
                        "type": "string"
                      },
                      "contactNo": {
                        "maxLength": 20,
                        "type": "string"
                      },
                      "comments1": {
                        "maxLength": 50,
                        "type": "string"
                      },
                      "comments2": {
                        "maxLength": 50,
                        "type": "string"
                      },
                      "points": {
                        "type": "integer",
                        "format": "int32",
                        "default": 0
                      },
                      "discontinue": {
                        "type": "boolean",
                        "default": false
                      },
                      "asAbove": {
                        "type": "boolean",
                        "default": true,
                        "description": "Assigns the standard address as also the delivery address, leave delivery address blank and assign asAbove as true if delivery address is not different to customer address"
                      },
                      "masterAccount": {
                        "maxLength": 16,
                        "type": "string"
                      },
                      "creditLimit": {
                        "type": "number",
                        "format": "double",
                        "description": "Customer credit limit\n`POST` values must be integers, `GET` responses will be doubles.\n",
                        "default": 0
                      },
                      "address1": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "address2": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "suburb": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "state": {
                        "type": "string",
                        "maxLength": 3
                      },
                      "postCode": {
                        "type": "string",
                        "maxLength": 10
                      },
                      "deliveryAddress1": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "deliveryAddress2": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "deliverySuburb": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "deliveryState": {
                        "type": "string",
                        "maxLength": 3
                      },
                      "deliveryPostcode": {
                        "type": "string",
                        "maxLength": 10
                      }
                    },
                    "required": [
                      "code",
                      "lastName"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameter"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          }
        ]
      }
    },
    "/customer/all/{startId}/{quantity}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get all Customers paged",
        "description": "Gets all Customers within pos system starting from id",
        "operationId": "findAllCustomersPaged",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          },
          {
            "name": "startId",
            "in": "path",
            "description": "Start Customer ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "path",
            "description": "Page size in customer numbers",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results of all Customers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Customer": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Customer object containing fields associated with a POS Customer.\n\nHidden Values  \nIt is possible to use any field in POS, over and above what is defined below in a `POST` request. Most common fields are included here,\nthough there are many more available (eg; `userDefinedText1 - 10`, `dob`, `dob2` etc). Please contact your POS vender to obtain a full list.\n",
                        "properties": {
                          "uniqueId": {
                            "type": "integer",
                            "description": "The unique identifier of a Customer          \nIgnored in `POST` or `PUT` requests. Returned on all `GET` and `POST` requests.\nPOS may use the same email for multiple accounts, or change email/code of a Customer.  \nThe `uniqueId` is provided as part of the response to creating a Customer through this api or by searching or requesting \nfull Customer list.\n"
                          },
                          "code": {
                            "maxLength": 10,
                            "minLength": 1,
                            "type": "string",
                            "description": "#### POS Code for customer  \n\n**Required** only on `POST` requests. Returned on all `GET` requests.  \n- Must be **unique**. If code supplied already exists a `Conflict in parameter - Customer code: {code} already exists \nas Customer code for Customer ID: #` error will be returned  \n- **Special characters** will result in `Bad input parameter - customerCode must not contain special character` error  \n- **Leading numeric 0** will result in `Bad input parameter - customerCode index 0 must not be numeric 0` error\n"
                          },
                          "lastName": {
                            "maxLength": 30,
                            "minLength": 1,
                            "type": "string",
                            "description": "#### Customer last name          \n**Required** only on `POST` requests. Returned on all `GET` requests.\n"
                          },
                          "email": {
                            "maxLength": 50,
                            "type": "string",
                            "description": "#### Customer email address  \n- May return `Bad input parameter - Customer email: {email} does not appear to be a valid email, or does not pass spam check`\nif API flags as spam.\n"
                          },
                          "type": {
                            "minimum": 1,
                            "type": "integer",
                            "description": "#### Default Type\n- Defined in Customer Type within User-Defined in POS System. Leaving type out will result in default type defined there.\nOverride with value between 1 - 9999 to NOT use the system default.\n"
                          },
                          "firstName": {
                            "maxLength": 15,
                            "type": "string"
                          },
                          "scanCode": {
                            "maxLength": 13,
                            "type": "string",
                            "description": "#### POS scan code or other unique code for customer   \n- Must be **unique**.  \n- If `scanCode` exists as a Customer Code or scan code a `Conflict in parameter - Customer scan code: {scanCode} already exists as Customer code \nfor Customer ID: #` error will be returned.  \n- If `scanCode` exists as a Stock Item Code `Conflict in parameter - Customer scan code: {scanCode} already exists as Stock Code\nfor Stock Item: {code}` error will be returned.\n"
                          },
                          "phone": {
                            "maxLength": 20,
                            "minLength": 1,
                            "type": "string"
                          },
                          "company": {
                            "maxLength": 40,
                            "type": "string"
                          },
                          "contactNo": {
                            "maxLength": 20,
                            "type": "string"
                          },
                          "comments1": {
                            "maxLength": 50,
                            "type": "string"
                          },
                          "comments2": {
                            "maxLength": 50,
                            "type": "string"
                          },
                          "points": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                          },
                          "discontinue": {
                            "type": "boolean",
                            "default": false
                          },
                          "asAbove": {
                            "type": "boolean",
                            "default": true,
                            "description": "Assigns the standard address as also the delivery address, leave delivery address blank and assign asAbove as true if delivery address is not different to customer address"
                          },
                          "masterAccount": {
                            "maxLength": 16,
                            "type": "string"
                          },
                          "creditLimit": {
                            "type": "number",
                            "format": "double",
                            "description": "Customer credit limit\n`POST` values must be integers, `GET` responses will be doubles.\n",
                            "default": 0
                          },
                          "address1": {
                            "type": "string",
                            "maxLength": 35
                          },
                          "address2": {
                            "type": "string",
                            "maxLength": 35
                          },
                          "suburb": {
                            "type": "string",
                            "maxLength": 35
                          },
                          "state": {
                            "type": "string",
                            "maxLength": 3
                          },
                          "postCode": {
                            "type": "string",
                            "maxLength": 10
                          },
                          "deliveryAddress1": {
                            "type": "string",
                            "maxLength": 35
                          },
                          "deliveryAddress2": {
                            "type": "string",
                            "maxLength": 35
                          },
                          "deliverySuburb": {
                            "type": "string",
                            "maxLength": 35
                          },
                          "deliveryState": {
                            "type": "string",
                            "maxLength": 3
                          },
                          "deliveryPostcode": {
                            "type": "string",
                            "maxLength": 10
                          }
                        },
                        "required": [
                          "code",
                          "lastName"
                        ]
                      }
                    },
                    "PagingMeta": {
                      "type": "object",
                      "x-examples": {
                        "Standard Response": {
                          "total": 5874,
                          "startId": 0,
                          "endId": 1025,
                          "fetchQuantity": 1000
                        }
                      },
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "Total number of items within page pool"
                        },
                        "startId": {
                          "type": "integer",
                          "description": "Start ID that was requested"
                        },
                        "endId": {
                          "type": "integer",
                          "description": "Final ID in returned page (to use in next page request start ID)"
                        },
                        "fetchQuantity": {
                          "type": "integer",
                          "description": "Total number of items returned (if less than the requested quantity then completed)"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameter"
          }
        }
      }
    },
    "/customer/date/{date}": {
      "get": {
        "tags": [
          "customer"
        ],
        "summary": "Get all Customers by modified date",
        "description": "Will return two lists, first contains new customers by date entered, second contains any existing customers that were modified after that date",
        "operationId": "getCustomersByDate",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          },
          {
            "name": "date",
            "in": "path",
            "description": "Search for Customers added or modified after that date (not UTC, date in pos system)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "string",
              "format": "date ''2022-08-24%2000:00:00''"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customers found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "Customer object containing fields associated with a POS Customer.\n\nHidden Values  \nIt is possible to use any field in POS, over and above what is defined below in a `POST` request. Most common fields are included here,\nthough there are many more available (eg; `userDefinedText1 - 10`, `dob`, `dob2` etc). Please contact your POS vender to obtain a full list.\n",
                    "properties": {
                      "uniqueId": {
                        "type": "integer",
                        "description": "The unique identifier of a Customer          \nIgnored in `POST` or `PUT` requests. Returned on all `GET` and `POST` requests.\nPOS may use the same email for multiple accounts, or change email/code of a Customer.  \nThe `uniqueId` is provided as part of the response to creating a Customer through this api or by searching or requesting \nfull Customer list.\n"
                      },
                      "code": {
                        "maxLength": 10,
                        "minLength": 1,
                        "type": "string",
                        "description": "#### POS Code for customer  \n\n**Required** only on `POST` requests. Returned on all `GET` requests.  \n- Must be **unique**. If code supplied already exists a `Conflict in parameter - Customer code: {code} already exists \nas Customer code for Customer ID: #` error will be returned  \n- **Special characters** will result in `Bad input parameter - customerCode must not contain special character` error  \n- **Leading numeric 0** will result in `Bad input parameter - customerCode index 0 must not be numeric 0` error\n"
                      },
                      "lastName": {
                        "maxLength": 30,
                        "minLength": 1,
                        "type": "string",
                        "description": "#### Customer last name          \n**Required** only on `POST` requests. Returned on all `GET` requests.\n"
                      },
                      "email": {
                        "maxLength": 50,
                        "type": "string",
                        "description": "#### Customer email address  \n- May return `Bad input parameter - Customer email: {email} does not appear to be a valid email, or does not pass spam check`\nif API flags as spam.\n"
                      },
                      "type": {
                        "minimum": 1,
                        "type": "integer",
                        "description": "#### Default Type\n- Defined in Customer Type within User-Defined in POS System. Leaving type out will result in default type defined there.\nOverride with value between 1 - 9999 to NOT use the system default.\n"
                      },
                      "firstName": {
                        "maxLength": 15,
                        "type": "string"
                      },
                      "scanCode": {
                        "maxLength": 13,
                        "type": "string",
                        "description": "#### POS scan code or other unique code for customer   \n- Must be **unique**.  \n- If `scanCode` exists as a Customer Code or scan code a `Conflict in parameter - Customer scan code: {scanCode} already exists as Customer code \nfor Customer ID: #` error will be returned.  \n- If `scanCode` exists as a Stock Item Code `Conflict in parameter - Customer scan code: {scanCode} already exists as Stock Code\nfor Stock Item: {code}` error will be returned.\n"
                      },
                      "phone": {
                        "maxLength": 20,
                        "minLength": 1,
                        "type": "string"
                      },
                      "company": {
                        "maxLength": 40,
                        "type": "string"
                      },
                      "contactNo": {
                        "maxLength": 20,
                        "type": "string"
                      },
                      "comments1": {
                        "maxLength": 50,
                        "type": "string"
                      },
                      "comments2": {
                        "maxLength": 50,
                        "type": "string"
                      },
                      "points": {
                        "type": "integer",
                        "format": "int32",
                        "default": 0
                      },
                      "discontinue": {
                        "type": "boolean",
                        "default": false
                      },
                      "asAbove": {
                        "type": "boolean",
                        "default": true,
                        "description": "Assigns the standard address as also the delivery address, leave delivery address blank and assign asAbove as true if delivery address is not different to customer address"
                      },
                      "masterAccount": {
                        "maxLength": 16,
                        "type": "string"
                      },
                      "creditLimit": {
                        "type": "number",
                        "format": "double",
                        "description": "Customer credit limit\n`POST` values must be integers, `GET` responses will be doubles.\n",
                        "default": 0
                      },
                      "address1": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "address2": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "suburb": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "state": {
                        "type": "string",
                        "maxLength": 3
                      },
                      "postCode": {
                        "type": "string",
                        "maxLength": 10
                      },
                      "deliveryAddress1": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "deliveryAddress2": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "deliverySuburb": {
                        "type": "string",
                        "maxLength": 35
                      },
                      "deliveryState": {
                        "type": "string",
                        "maxLength": 3
                      },
                      "deliveryPostcode": {
                        "type": "string",
                        "maxLength": 10
                      }
                    },
                    "required": [
                      "code",
                      "lastName"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameter"
          }
        }
      }
    },
    "/voucher": {
      "post": {
        "tags": [
          "voucher"
        ],
        "summary": "Create Gift Voucher",
        "description": "Adds a new Gift Voucher to the pos system with specified values  \nFinancial data discrepancies will occur if used. Use a finalised purchase of a gift voucher instead\n",
        "operationId": "addVoucher",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          }
        ],
        "deprecated": true,
        "requestBody": {
          "description": "Voucher Object to add",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "maxLength": 16,
                    "type": "string",
                    "description": "\n"
                  },
                  "site": {
                    "maximum": 99,
                    "type": "integer",
                    "description": "Assigning as 0 will indicate gift voucher is redeemable at all sites (AllowGlobalRedemption = true)",
                    "default": 0
                  },
                  "amount": {
                    "type": "number",
                    "format": "decimal"
                  },
                  "date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Override of system datetime now. Date time of voucher purchased, in UTC time, will be converted to time-zone pos is in"
                  },
                  "dateExpires": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Override of system Type1 Gift Voucher Expiry. Date time of voucher expiry, in UTC time, will be converted to time-zone pos is in"
                  },
                  "amountRedeemed": {
                    "type": "number",
                    "format": "decimal"
                  },
                  "name": {
                    "maxLength": 30,
                    "type": "string"
                  },
                  "gvType": {
                    "maximum": 99,
                    "minimum": 1,
                    "type": "integer"
                  },
                  "email": {
                    "maxLength": 30,
                    "type": "string"
                  }
                },
                "required": [
                  "code"
                ],
                "x-examples": {
                  "Standard": {
                    "code": "9846573893746",
                    "site": 0,
                    "amount": 50,
                    "date": "2019-08-24 14:15:22",
                    "dateExpires": "2022-08-24 14:15:22",
                    "amountRedeemed": 0,
                    "name": "Dr Strange",
                    "gvType": 1,
                    "email": "drstrange@gmail.com"
                  }
                }
              },
              "examples": {
                "example-1": {
                  "value": {
                    "code": "string",
                    "site": 0,
                    "date": "2019-08-24T14:15:22Z",
                    "dateExpires": "2019-08-24T14:15:22Z",
                    "amount": 0,
                    "amountRedeemed": 0,
                    "name": "string",
                    "allowGlobalRedemption": true,
                    "giftVoucherType": 1,
                    "emailAddress": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Voucher created"
          },
          "400": {
            "description": "Bad input parameter"
          },
          "409": {
            "description": "Voucher with specified code already exists"
          }
        }
      }
    },
    "/voucher/{code}": {
      "get": {
        "tags": [
          "voucher"
        ],
        "summary": "Find Gift Voucher",
        "description": "Find a Gift Voucher in the pos system with specified code  \nWill return `code` prefixed with `GV`\n",
        "operationId": "findVoucher",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          },
          {
            "name": "code",
            "in": "path",
            "description": "Voucher code to be searched for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results matching code",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "maxLength": 16,
                        "type": "string",
                        "description": "\n"
                      },
                      "site": {
                        "maximum": 99,
                        "type": "integer",
                        "description": "Assigning as 0 will indicate gift voucher is redeemable at all sites (AllowGlobalRedemption = true)",
                        "default": 0
                      },
                      "amount": {
                        "type": "number",
                        "format": "decimal"
                      },
                      "date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Override of system datetime now. Date time of voucher purchased, in UTC time, will be converted to time-zone pos is in"
                      },
                      "dateExpires": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Override of system Type1 Gift Voucher Expiry. Date time of voucher expiry, in UTC time, will be converted to time-zone pos is in"
                      },
                      "amountRedeemed": {
                        "type": "number",
                        "format": "decimal"
                      },
                      "name": {
                        "maxLength": 30,
                        "type": "string"
                      },
                      "gvType": {
                        "maximum": 99,
                        "minimum": 1,
                        "type": "integer"
                      },
                      "email": {
                        "maxLength": 30,
                        "type": "string"
                      }
                    },
                    "required": [
                      "code"
                    ],
                    "x-examples": {
                      "Standard": {
                        "code": "9846573893746",
                        "site": 0,
                        "amount": 50,
                        "date": "2019-08-24 14:15:22",
                        "dateExpires": "2022-08-24 14:15:22",
                        "amountRedeemed": 0,
                        "name": "Dr Strange",
                        "gvType": 1,
                        "email": "drstrange@gmail.com"
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": [
                      {
                        "code": "string",
                        "site": 0,
                        "amount": 0,
                        "date": "2019-08-24T14:15:22Z",
                        "dateExpires": "2019-08-24T14:15:22Z",
                        "amountRedeemed": 0,
                        "name": "string",
                        "gvType": 1,
                        "email": "string"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameter"
          }
        }
      },
      "put": {
        "tags": [
          "voucher"
        ],
        "summary": "Update Gift Voucher",
        "description": "Update an existing Gift Voucher in the pos system",
        "operationId": "updateVoucher",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          },
          {
            "name": "code",
            "in": "path",
            "description": "Voucher code to be updated",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Voucher Object to add with updated values",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "maxLength": 16,
                    "type": "string",
                    "description": "\n"
                  },
                  "site": {
                    "maximum": 99,
                    "type": "integer",
                    "description": "Assigning as 0 will indicate gift voucher is redeemable at all sites (AllowGlobalRedemption = true)",
                    "default": 0
                  },
                  "amount": {
                    "type": "number",
                    "format": "decimal"
                  },
                  "date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Override of system datetime now. Date time of voucher purchased, in UTC time, will be converted to time-zone pos is in"
                  },
                  "dateExpires": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Override of system Type1 Gift Voucher Expiry. Date time of voucher expiry, in UTC time, will be converted to time-zone pos is in"
                  },
                  "amountRedeemed": {
                    "type": "number",
                    "format": "decimal"
                  },
                  "name": {
                    "maxLength": 30,
                    "type": "string"
                  },
                  "gvType": {
                    "maximum": 99,
                    "minimum": 1,
                    "type": "integer"
                  },
                  "email": {
                    "maxLength": 30,
                    "type": "string"
                  }
                },
                "required": [
                  "code"
                ],
                "x-examples": {
                  "Standard": {
                    "code": "9846573893746",
                    "site": 0,
                    "amount": 50,
                    "date": "2019-08-24 14:15:22",
                    "dateExpires": "2022-08-24 14:15:22",
                    "amountRedeemed": 0,
                    "name": "Dr Strange",
                    "gvType": 1,
                    "email": "drstrange@gmail.com"
                  }
                }
              },
              "examples": {
                "example-1": {
                  "value": {
                    "code": "string",
                    "site": 0,
                    "date": "2019-08-24 14:15:22",
                    "dateExpires": "2019-08-24 14:15:22",
                    "amount": 0,
                    "amountRedeemed": 0,
                    "name": "string",
                    "allowGlobalRedemption": true,
                    "giftVoucherType": 1,
                    "emailAddress": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Voucher updated"
          },
          "400": {
            "description": "Bad input parameter"
          },
          "409": {
            "description": "Error updating existing voucher"
          }
        }
      }
    },
    "/vouchers/all": {
      "get": {
        "tags": [
          "voucher"
        ],
        "summary": "Get all Gift Vouchers",
        "description": "Gets all Gift Vouchers in the pos system",
        "operationId": "allVouchers",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Search results of all Vouchers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "maxLength": 16,
                        "type": "string",
                        "description": "\n"
                      },
                      "site": {
                        "maximum": 99,
                        "type": "integer",
                        "description": "Assigning as 0 will indicate gift voucher is redeemable at all sites (AllowGlobalRedemption = true)",
                        "default": 0
                      },
                      "amount": {
                        "type": "number",
                        "format": "decimal"
                      },
                      "date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Override of system datetime now. Date time of voucher purchased, in UTC time, will be converted to time-zone pos is in"
                      },
                      "dateExpires": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Override of system Type1 Gift Voucher Expiry. Date time of voucher expiry, in UTC time, will be converted to time-zone pos is in"
                      },
                      "amountRedeemed": {
                        "type": "number",
                        "format": "decimal"
                      },
                      "name": {
                        "maxLength": 30,
                        "type": "string"
                      },
                      "gvType": {
                        "maximum": 99,
                        "minimum": 1,
                        "type": "integer"
                      },
                      "email": {
                        "maxLength": 30,
                        "type": "string"
                      }
                    },
                    "required": [
                      "code"
                    ],
                    "x-examples": {
                      "Standard": {
                        "code": "9846573893746",
                        "site": 0,
                        "amount": 50,
                        "date": "2019-08-24 14:15:22",
                        "dateExpires": "2022-08-24 14:15:22",
                        "amountRedeemed": 0,
                        "name": "Dr Strange",
                        "gvType": 1,
                        "email": "drstrange@gmail.com"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameter"
          }
        }
      }
    },
    "/weborder/unpaid": {
      "post": {
        "tags": [
          "webstore"
        ],
        "summary": "Create unpaid Web Order",
        "description": "An order from the web store that the Customer will make payment in store when collecting. Orders will show at the top of POS sales screen as per below image.  \n<!--\nfocus: false\n-->\n![Web Order Notify](https://cachetech.com.au/files/images/stoplight_images/web-order-sales-screen.png)  \nValues should be left out if not used. API will insert POS identified values where aproppriate.  \n### WARNING\n`code` element **must be unique** - Using an existing order code that **has not been finalised at POS** will result in the previous order being **overwritten** by the new order!  \n#### Required Body elements  \n`code` identifier of order, usually associated with the web id. Must be **unique**  \n`pos` number (int) - used to identify situation unique events.  \n`orderLines` object - each line of the order, including `TEXT` lines at top for any name/address  \n\n#### Optional Body elements  \n`deliveryDate` UTC time that order should be ready by. A non-existing value will use \"now\" (according to Time-Zone of POS)  \n`customerId` ID of Customer - 0 will use WGUEST (code) customer. Non-existing ID will **not** assign a Customer  \n`clerkCode` number (int) - To override POS set Web Order Clerk to any other Clerk in POS  \n`guestCustomer` object -  Address of WGUEST Customer, or name only if not a registered/guest Customer\nA typical, minimal, unpaid Web Order body might look like the below:\n```json\n{\n\"code\": \"000001\",\n\"pos\": 1,\n\"customerId\": 0,\n\"guestCustomer\": {\n\"address1\": \"22 Greenhill Rd\",\n\"suburb\": \"WAYVILLE\",\n\"state\": \"SA\",\n\"postCode\": \"5034\",\n\"name\": \"Cache Test\"\n},\n\"orderLines\": [\n{\n\"lineType\": \"ITEM\",\n\"itemCode\": \"TEXT\",\n\"description\": \"PICK-UP ORDER\"\n},\n{\n\"lineType\": \"ITEM\",\n\"itemCode\": \"COF00001\",\n\"description\": \"CAFE LATTE\",\n\"quantity\": 1,\n\"totalPrice\": 5.50\n},\n{\n\"lineType\": \"ITEM\",\n\"itemCode\": \"INST\",\n\"description\": \"> LARGE\",\n\"quantity\": 1,\n\"totalPrice\": 0.50\n}\n]\n}\n```\n",
        "operationId": "addUnpaidWebOrder",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Web Order Object to Add",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-examples": {
                  "Guest Web Customer": {
                    "code": 6203,
                    "pos": 1,
                    "customerId": 0,
                    "guestCustomer": {
                      "address1": "22 Greenhill Rd",
                      "suburb": "Wayville",
                      "state": "SA",
                      "postCode": 5034,
                      "name": "King Bore"
                    },
                    "orderPayment": {
                      "paymentAmt": 19.95,
                      "paymentMethod": "WEB"
                    },
                    "orderLines": {
                      "type": "ITEM",
                      "itemCode": "PUM500",
                      "description": "PUMICE POWDER 500G",
                      "quantity": 1,
                      "totalPrice": 19.95
                    }
                  },
                  "Registered Customer": {
                    "code": 6204,
                    "pos": 1,
                    "customerId": 34,
                    "orderPayment": {
                      "pointsEarned": 54,
                      "paymentAmt": 54.9,
                      "paymentMethod": "WEB"
                    },
                    "orderLines": [
                      {
                        "type": "ITEM",
                        "itemCode": "PUM500",
                        "description": "PUMICE POWDER 500G",
                        "quantity": 1,
                        "totalPrice": 19.95
                      },
                      {
                        "type": "ITEM",
                        "itemCode": "PUM1000",
                        "description": "PUMICE POWDER 1Kg",
                        "quantity": 1,
                        "totalPrice": 34.95
                      }
                    ]
                  },
                  "Registered Customer Points Spend": {
                    "code": 6204,
                    "pos": 1,
                    "customerId": 34,
                    "orderPayment": {
                      "pointsEarned": 54,
                      "pointsRedeemed": 5500,
                      "paymentAmt": 54.9,
                      "paymentMethod": "POINTS"
                    },
                    "orderLines": [
                      {
                        "type": "ITEM",
                        "itemCode": "PUM500",
                        "description": "PUMICE POWDER 500G",
                        "quantity": 1,
                        "totalPrice": 19.95
                      },
                      {
                        "type": "ITEM",
                        "itemCode": "PUM1000",
                        "description": "PUMICE POWDER 1Kg",
                        "quantity": 1,
                        "totalPrice": 34.95
                      }
                    ]
                  },
                  "Cash Customer Delivery": {
                    "code": 6203,
                    "pos": 1,
                    "guestCustomer": {
                      "address1": "22 Greenhill Rd",
                      "suburb": "Wayville",
                      "state": "SA",
                      "postCode": 5034,
                      "name": "King Bore"
                    },
                    "orderPayment": {
                      "paymentAmt": 19.95,
                      "paymentMethod": "WEB"
                    },
                    "orderLines": {
                      "type": "ITEM",
                      "itemCode": "PUM500",
                      "description": "PUMICE POWDER 500G",
                      "quantity": 1,
                      "totalPrice": 19.95
                    }
                  },
                  "Cash Customer Pick-Up": {
                    "code": 6203,
                    "pos": 1,
                    "guestCustomer": {
                      "name": "King Bore"
                    },
                    "orderPayment": {
                      "paymentAmt": 19.95,
                      "paymentMethod": "WEB"
                    },
                    "orderLines": {
                      "type": "ITEM",
                      "itemCode": "PUM500",
                      "description": "PUMICE POWDER 500G",
                      "quantity": 1,
                      "totalPrice": 19.95
                    }
                  }
                },
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Web Order code or reference number, system will prefix with \"WEB ORDER \". Suggested to use a code unique to web system to allow cross-referencing/debugging"
                  },
                  "pos": {
                    "type": "integer",
                    "description": "Pos number to put the sale against. Pos number MUST exist in POS Terminal settings."
                  },
                  "deliveryDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date that the finished order is to be available in UTC time, will be converted to time-zone pos is in."
                  },
                  "customerId": {
                    "type": "integer",
                    "description": "Assigning as 0 will use non-registered customer (Guest) - POS will create if not exists, pos code of WGUEST''. Any other number must be of the id of customer in POS system (NOT code)."
                  },
                  "clerkCode": {
                    "type": "integer",
                    "description": "Will assign automatically as designated Web Store clerk in POS, can override using desired clerk code here."
                  },
                  "guestCustomer": {
                    "type": "object",
                    "properties": {
                      "address1": {
                        "type": "string",
                        "maxLength": 35,
                        "description": "Delivery address1 for Guest Customer"
                      },
                      "address2": {
                        "type": "string",
                        "maxLength": 35,
                        "description": "Delivery address2 for web Guest Customer"
                      },
                      "suburb": {
                        "type": "string",
                        "maxLength": 35,
                        "description": "Suburb for web Guest Customer"
                      },
                      "state": {
                        "type": "string",
                        "maxLength": 3,
                        "description": "State for web Guest Customer"
                      },
                      "postCode": {
                        "type": "string",
                        "maxLength": 10,
                        "description": "Post Code for web Guest Customer"
                      },
                      "name": {
                        "type": "string",
                        "maxLength": 35,
                        "description": "Name of web Guest Customer and in-store (Pick-Up/Order-In) customers (through a customer facing app)"
                      }
                    }
                  },
                  "orderPayment": {
                    "type": "array",
                    "description": "Payment lines broken into payment methods (total is part payable in multiple tender types) - NOT REQUIRED for /weborder/unpaid",
                    "items": {
                      "type": "object",
                      "description": "### OrderPayment - Tender Types and Amounts of a finalised transaction\nOrders may be paid entirely by one method, or by using several methods. So long as the cumulative total is equal to the total amount of `OrderLines` `amount` value.  \n\n#### Payment Method Options \nWhilst it is possible to use the exact Tender value from POS (T1...T18) it is recommended to use the preset values that are defined using User-Defined or Gloabl Option Settings in POS rather than the direct value.\n- `WEB` Will use the value assigned as `Web Order Tender` within POS Global Options \"eCommerce Interface\" section for web payments\n- `POINTS` Will use POS set `Points Tender` within Global Options Customer Tab \"miscellaneous\" section for Points tenders\n- `VOUCHER` Will use `User-Defined` value for Web Voucher Tender\n- `ACCOUNT` Will use the POS set `Account Tender` (will only allow tendering if credit is available on account along with the Customer being an Account Type Customer)\nUsing the above preset values ensure that nuances with each tender is followed (eg; `ACCOUNT` will check for available credit etc)  \nThe body of the request only needs the values that are required for each Payment Method.\n",
                      "x-examples": {
                        "Gift Voucher Payment": {
                          "OrderPayment": [
                            {
                              "paymentAmt": 20.95,
                              "paymentMethod": "VOUCHER",
                              "code": "GV9045763542867"
                            }
                          ]
                        },
                        "Online Payment": {
                          "OrderPayment": [
                            {
                              "paymentAmt": 20.95,
                              "paymentMethod": "WEB"
                            }
                          ]
                        },
                        "Points Payment": {
                          "OrderPayment": [
                            {
                              "pointsRedeemed": 2095,
                              "paymentAmt": 20.95,
                              "paymentMethod": "POINTS"
                            }
                          ]
                        },
                        "Split Payment": {
                          "OrderPayment": [
                            {
                              "pointsEarned": 34,
                              "paymentAmt": 34,
                              "paymentMethod": "WEB"
                            },
                            {
                              "pointsRedeemed": 5000,
                              "paymentAmt": 50,
                              "paymentMethod": "POINTS"
                            }
                          ]
                        },
                        "Account Payment": {
                          "OrderPayment": [
                            {
                              "paymentAmt": 20.95,
                              "paymentMethod": "ACCOUNT"
                            }
                          ]
                        }
                      },
                      "properties": {
                        "pointsEarned": {
                          "type": "number",
                          "format": "integer",
                          "description": "Number of points earned on transaction"
                        },
                        "pointsRedeemed": {
                          "type": "number",
                          "format": "integer",
                          "description": "Number of points redemeed at checkout"
                        },
                        "paymentAmt": {
                          "type": "number",
                          "format": "double",
                          "description": "Amount tendered by payment method including any GST"
                        },
                        "paymentMethod": {
                          "type": "string",
                          "description": "Tender used to a payment. Note: T1...T18 are NOT recommended to use as it implies a perfect relationship with pos",
                          "enum": [
                            "WEB",
                            "POINTS",
                            "VOUCHER",
                            "ACCOUNT",
                            "T1...T18"
                          ]
                        },
                        "code": {
                          "type": "string",
                          "description": "Gift voucher code used for payment, including prefix `GV`"
                        }
                      },
                      "required": [
                        "paymentAmt",
                        "paymentMethod"
                      ]
                    }
                  },
                  "orderedDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Use of this will affect financials.  \nRemoved from v1.0.25 by way of ignoring any value here.  \nAPI will always use POS time of successful insertion of order.\nDate that order takes place, override for system generated \"now\" -  in UTC time, will be converted to time-zone pos is in\n",
                    "deprecated": true
                  },
                  "orderLines": {
                    "type": "array",
                    "description": "Line by line of order. Instruction items must follow an Item line. Text may be anywhere",
                    "items": {
                      "type": "object",
                      "x-examples": {
                        "Item Order": {
                          "lineType": "ITEM",
                          "itemCode": "I45-JG",
                          "description": "Canvas Item size 45",
                          "quantity": 2,
                          "totalPrice": 45.8
                        },
                        "New Gift Voucher": {
                          "lineType": "VOUCHER",
                          "itemCode": "WB09456983493",
                          "description": "WEB GIFT VOUCHER",
                          "totalPrice": 50,
                          "gvSite": 0,
                          "gvExpiryDays": 1096,
                          "gvEmail": "test@example.com.au",
                          "gvName": "George Test"
                        },
                        "Free Type Text": {
                          "lineType": "TEXT",
                          "description": "That line above was a gift voucher"
                        },
                        "Discount": {
                          "lineType": "DISCOUNT",
                          "totalPrice": -1.33
                        }
                      },
                      "description": "Lines of the order, containing items sold along with codes, quantities and pricing. Also used for free text within the transaction and selling of a Gift Voucher and giving an item discount (pertains to item in line above the discount)",
                      "properties": {
                        "lineType": {
                          "type": "string",
                          "format": "enum [ITEM, INSTRUCTION, TEXT, VOUCHER, DISCOUNT]",
                          "description": "`ITEM`: A product found on the WebProduct list of items  \n`INSTRUCTION`: A product found on the WebProduct list of items that is instructable to the `ITEM` in line above it  \n`TEXT`: Instructive text  \n`VOUCHER`: A gift voucher  \n`DISCOUNT`: A discount relating to the item of the line above it\n",
                          "enum": [
                            "ITEM",
                            "INSTRUCTION",
                            "TEXT",
                            "VOUCHER",
                            "DISCOUNT"
                          ]
                        },
                        "itemCode": {
                          "type": "string",
                          "description": "Dependant on `lineType` used:  \n`ITEM` <span style=\"color:red\">required</span> - POS code of product (MUST exist in WebProduct)  \n`VOUCHER` <span style=\"color:red\">required</span> - New Gift Voucher code\nAll other `lineTypes` do not require this feild and should be left out (see examples)\n"
                        },
                        "description": {
                          "type": "string",
                          "maxLength": 30,
                          "description": "Dependant on `lineType` used:  \n`ITEM` <span style=\"color:red\">required</span> - POS description of product (preferable to use value in WebProduct so as to match POS internal descriptions)  \n`VOUCHER` <span style=\"color:red\">required</span> - A Gift Voucher description, to suit type of voucher in WebStore  \n`TEXT` <span style=\"color:red\">required</span> - Free type text (must be an `ITEM` `lineType` above to ensure prints to kitchen printers)\n"
                        },
                        "quantity": {
                          "type": "number",
                          "format": "decimal"
                        },
                        "totalPrice": {
                          "type": "number",
                          "format": "decimal",
                          "description": "The TOTAL price of all items within the sale(quantity * unit price)"
                        },
                        "orderedTime": {
                          "type": "string",
                          "format": "date-time",
                          "description": "If different to original order (not used currently) in UTC time, will be converted to time-zone pos is in''"
                        },
                        "gvSite": {
                          "type": "integer",
                          "description": "Override default value of 0 (redeemable at all sites) for a new gift voucher"
                        },
                        "gvDate": {
                          "type": "string",
                          "description": "Override \"now\" time for timezone that pos terminal is in. Must be in UTC time"
                        },
                        "gvExpiryDays": {
                          "type": "string",
                          "description": "Override default value of 1096 or pos set value of voucher type 1"
                        },
                        "gvType": {
                          "type": "integer",
                          "maximum": 20,
                          "description": "Type number of gift voucher, overrides the default of 1 (1 - 20)"
                        },
                        "gvEmail": {
                          "type": "string",
                          "description": "Override Customer email or assign if no email for customer exists."
                        },
                        "gvName": {
                          "type": "string",
                          "description": "Override Customer/Guest name or assign as a gifted voucher (the TO: field of a gift voucher)."
                        }
                      },
                      "required": [
                        "lineType"
                      ]
                    }
                  }
                },
                "required": [
                  "pos",
                  "orderPayment",
                  "orderLines"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Order successfully added"
          },
          "400": {
            "description": "Failed to insert new order"
          },
          "409": {
            "description": "Order already exists"
          }
        }
      }
    },
    "/weborder/finalised": {
      "post": {
        "tags": [
          "webstore"
        ],
        "summary": "Create finalised Web Order",
        "description": "Web Order that has been fully paid online.\n",
        "operationId": "addFinalisedWebOrder",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Web Order Object to Add",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-examples": {
                  "Guest Web Customer": {
                    "code": 6203,
                    "pos": 1,
                    "customerId": 0,
                    "guestCustomer": {
                      "address1": "22 Greenhill Rd",
                      "suburb": "Wayville",
                      "state": "SA",
                      "postCode": 5034,
                      "name": "King Bore"
                    },
                    "orderPayment": {
                      "paymentAmt": 19.95,
                      "paymentMethod": "WEB"
                    },
                    "orderLines": {
                      "type": "ITEM",
                      "itemCode": "PUM500",
                      "description": "PUMICE POWDER 500G",
                      "quantity": 1,
                      "totalPrice": 19.95
                    }
                  },
                  "Registered Customer": {
                    "code": 6204,
                    "pos": 1,
                    "customerId": 34,
                    "orderPayment": {
                      "pointsEarned": 54,
                      "paymentAmt": 54.9,
                      "paymentMethod": "WEB"
                    },
                    "orderLines": [
                      {
                        "type": "ITEM",
                        "itemCode": "PUM500",
                        "description": "PUMICE POWDER 500G",
                        "quantity": 1,
                        "totalPrice": 19.95
                      },
                      {
                        "type": "ITEM",
                        "itemCode": "PUM1000",
                        "description": "PUMICE POWDER 1Kg",
                        "quantity": 1,
                        "totalPrice": 34.95
                      }
                    ]
                  },
                  "Registered Customer Points Spend": {
                    "code": 6204,
                    "pos": 1,
                    "customerId": 34,
                    "orderPayment": {
                      "pointsEarned": 54,
                      "pointsRedeemed": 5500,
                      "paymentAmt": 54.9,
                      "paymentMethod": "POINTS"
                    },
                    "orderLines": [
                      {
                        "type": "ITEM",
                        "itemCode": "PUM500",
                        "description": "PUMICE POWDER 500G",
                        "quantity": 1,
                        "totalPrice": 19.95
                      },
                      {
                        "type": "ITEM",
                        "itemCode": "PUM1000",
                        "description": "PUMICE POWDER 1Kg",
                        "quantity": 1,
                        "totalPrice": 34.95
                      }
                    ]
                  },
                  "Cash Customer Delivery": {
                    "code": 6203,
                    "pos": 1,
                    "guestCustomer": {
                      "address1": "22 Greenhill Rd",
                      "suburb": "Wayville",
                      "state": "SA",
                      "postCode": 5034,
                      "name": "King Bore"
                    },
                    "orderPayment": {
                      "paymentAmt": 19.95,
                      "paymentMethod": "WEB"
                    },
                    "orderLines": {
                      "type": "ITEM",
                      "itemCode": "PUM500",
                      "description": "PUMICE POWDER 500G",
                      "quantity": 1,
                      "totalPrice": 19.95
                    }
                  },
                  "Cash Customer Pick-Up": {
                    "code": 6203,
                    "pos": 1,
                    "guestCustomer": {
                      "name": "King Bore"
                    },
                    "orderPayment": {
                      "paymentAmt": 19.95,
                      "paymentMethod": "WEB"
                    },
                    "orderLines": {
                      "type": "ITEM",
                      "itemCode": "PUM500",
                      "description": "PUMICE POWDER 500G",
                      "quantity": 1,
                      "totalPrice": 19.95
                    }
                  }
                },
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Web Order code or reference number, system will prefix with \"WEB ORDER \". Suggested to use a code unique to web system to allow cross-referencing/debugging"
                  },
                  "pos": {
                    "type": "integer",
                    "description": "Pos number to put the sale against. Pos number MUST exist in POS Terminal settings."
                  },
                  "deliveryDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date that the finished order is to be available in UTC time, will be converted to time-zone pos is in."
                  },
                  "customerId": {
                    "type": "integer",
                    "description": "Assigning as 0 will use non-registered customer (Guest) - POS will create if not exists, pos code of WGUEST''. Any other number must be of the id of customer in POS system (NOT code)."
                  },
                  "clerkCode": {
                    "type": "integer",
                    "description": "Will assign automatically as designated Web Store clerk in POS, can override using desired clerk code here."
                  },
                  "guestCustomer": {
                    "type": "object",
                    "properties": {
                      "address1": {
                        "type": "string",
                        "maxLength": 35,
                        "description": "Delivery address1 for Guest Customer"
                      },
                      "address2": {
                        "type": "string",
                        "maxLength": 35,
                        "description": "Delivery address2 for web Guest Customer"
                      },
                      "suburb": {
                        "type": "string",
                        "maxLength": 35,
                        "description": "Suburb for web Guest Customer"
                      },
                      "state": {
                        "type": "string",
                        "maxLength": 3,
                        "description": "State for web Guest Customer"
                      },
                      "postCode": {
                        "type": "string",
                        "maxLength": 10,
                        "description": "Post Code for web Guest Customer"
                      },
                      "name": {
                        "type": "string",
                        "maxLength": 35,
                        "description": "Name of web Guest Customer and in-store (Pick-Up/Order-In) customers (through a customer facing app)"
                      }
                    }
                  },
                  "orderPayment": {
                    "type": "array",
                    "description": "Payment lines broken into payment methods (total is part payable in multiple tender types) - NOT REQUIRED for /weborder/unpaid",
                    "items": {
                      "type": "object",
                      "description": "### OrderPayment - Tender Types and Amounts of a finalised transaction\nOrders may be paid entirely by one method, or by using several methods. So long as the cumulative total is equal to the total amount of `OrderLines` `amount` value.  \n\n#### Payment Method Options \nWhilst it is possible to use the exact Tender value from POS (T1...T18) it is recommended to use the preset values that are defined using User-Defined or Gloabl Option Settings in POS rather than the direct value.\n- `WEB` Will use the value assigned as `Web Order Tender` within POS Global Options \"eCommerce Interface\" section for web payments\n- `POINTS` Will use POS set `Points Tender` within Global Options Customer Tab \"miscellaneous\" section for Points tenders\n- `VOUCHER` Will use `User-Defined` value for Web Voucher Tender\n- `ACCOUNT` Will use the POS set `Account Tender` (will only allow tendering if credit is available on account along with the Customer being an Account Type Customer)\nUsing the above preset values ensure that nuances with each tender is followed (eg; `ACCOUNT` will check for available credit etc)  \nThe body of the request only needs the values that are required for each Payment Method.\n",
                      "x-examples": {
                        "Gift Voucher Payment": {
                          "OrderPayment": [
                            {
                              "paymentAmt": 20.95,
                              "paymentMethod": "VOUCHER",
                              "code": "GV9045763542867"
                            }
                          ]
                        },
                        "Online Payment": {
                          "OrderPayment": [
                            {
                              "paymentAmt": 20.95,
                              "paymentMethod": "WEB"
                            }
                          ]
                        },
                        "Points Payment": {
                          "OrderPayment": [
                            {
                              "pointsRedeemed": 2095,
                              "paymentAmt": 20.95,
                              "paymentMethod": "POINTS"
                            }
                          ]
                        },
                        "Split Payment": {
                          "OrderPayment": [
                            {
                              "pointsEarned": 34,
                              "paymentAmt": 34,
                              "paymentMethod": "WEB"
                            },
                            {
                              "pointsRedeemed": 5000,
                              "paymentAmt": 50,
                              "paymentMethod": "POINTS"
                            }
                          ]
                        },
                        "Account Payment": {
                          "OrderPayment": [
                            {
                              "paymentAmt": 20.95,
                              "paymentMethod": "ACCOUNT"
                            }
                          ]
                        }
                      },
                      "properties": {
                        "pointsEarned": {
                          "type": "number",
                          "format": "integer",
                          "description": "Number of points earned on transaction"
                        },
                        "pointsRedeemed": {
                          "type": "number",
                          "format": "integer",
                          "description": "Number of points redemeed at checkout"
                        },
                        "paymentAmt": {
                          "type": "number",
                          "format": "double",
                          "description": "Amount tendered by payment method including any GST"
                        },
                        "paymentMethod": {
                          "type": "string",
                          "description": "Tender used to a payment. Note: T1...T18 are NOT recommended to use as it implies a perfect relationship with pos",
                          "enum": [
                            "WEB",
                            "POINTS",
                            "VOUCHER",
                            "ACCOUNT",
                            "T1...T18"
                          ]
                        },
                        "code": {
                          "type": "string",
                          "description": "Gift voucher code used for payment, including prefix `GV`"
                        }
                      },
                      "required": [
                        "paymentAmt",
                        "paymentMethod"
                      ]
                    }
                  },
                  "orderedDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Use of this will affect financials.  \nRemoved from v1.0.25 by way of ignoring any value here.  \nAPI will always use POS time of successful insertion of order.\nDate that order takes place, override for system generated \"now\" -  in UTC time, will be converted to time-zone pos is in\n",
                    "deprecated": true
                  },
                  "orderLines": {
                    "type": "array",
                    "description": "Line by line of order. Instruction items must follow an Item line. Text may be anywhere",
                    "items": {
                      "type": "object",
                      "x-examples": {
                        "Item Order": {
                          "lineType": "ITEM",
                          "itemCode": "I45-JG",
                          "description": "Canvas Item size 45",
                          "quantity": 2,
                          "totalPrice": 45.8
                        },
                        "New Gift Voucher": {
                          "lineType": "VOUCHER",
                          "itemCode": "WB09456983493",
                          "description": "WEB GIFT VOUCHER",
                          "totalPrice": 50,
                          "gvSite": 0,
                          "gvExpiryDays": 1096,
                          "gvEmail": "test@example.com.au",
                          "gvName": "George Test"
                        },
                        "Free Type Text": {
                          "lineType": "TEXT",
                          "description": "That line above was a gift voucher"
                        },
                        "Discount": {
                          "lineType": "DISCOUNT",
                          "totalPrice": -1.33
                        }
                      },
                      "description": "Lines of the order, containing items sold along with codes, quantities and pricing. Also used for free text within the transaction and selling of a Gift Voucher and giving an item discount (pertains to item in line above the discount)",
                      "properties": {
                        "lineType": {
                          "type": "string",
                          "format": "enum [ITEM, INSTRUCTION, TEXT, VOUCHER, DISCOUNT]",
                          "description": "`ITEM`: A product found on the WebProduct list of items  \n`INSTRUCTION`: A product found on the WebProduct list of items that is instructable to the `ITEM` in line above it  \n`TEXT`: Instructive text  \n`VOUCHER`: A gift voucher  \n`DISCOUNT`: A discount relating to the item of the line above it\n",
                          "enum": [
                            "ITEM",
                            "INSTRUCTION",
                            "TEXT",
                            "VOUCHER",
                            "DISCOUNT"
                          ]
                        },
                        "itemCode": {
                          "type": "string",
                          "description": "Dependant on `lineType` used:  \n`ITEM` <span style=\"color:red\">required</span> - POS code of product (MUST exist in WebProduct)  \n`VOUCHER` <span style=\"color:red\">required</span> - New Gift Voucher code\nAll other `lineTypes` do not require this feild and should be left out (see examples)\n"
                        },
                        "description": {
                          "type": "string",
                          "maxLength": 30,
                          "description": "Dependant on `lineType` used:  \n`ITEM` <span style=\"color:red\">required</span> - POS description of product (preferable to use value in WebProduct so as to match POS internal descriptions)  \n`VOUCHER` <span style=\"color:red\">required</span> - A Gift Voucher description, to suit type of voucher in WebStore  \n`TEXT` <span style=\"color:red\">required</span> - Free type text (must be an `ITEM` `lineType` above to ensure prints to kitchen printers)\n"
                        },
                        "quantity": {
                          "type": "number",
                          "format": "decimal"
                        },
                        "totalPrice": {
                          "type": "number",
                          "format": "decimal",
                          "description": "The TOTAL price of all items within the sale(quantity * unit price)"
                        },
                        "orderedTime": {
                          "type": "string",
                          "format": "date-time",
                          "description": "If different to original order (not used currently) in UTC time, will be converted to time-zone pos is in''"
                        },
                        "gvSite": {
                          "type": "integer",
                          "description": "Override default value of 0 (redeemable at all sites) for a new gift voucher"
                        },
                        "gvDate": {
                          "type": "string",
                          "description": "Override \"now\" time for timezone that pos terminal is in. Must be in UTC time"
                        },
                        "gvExpiryDays": {
                          "type": "string",
                          "description": "Override default value of 1096 or pos set value of voucher type 1"
                        },
                        "gvType": {
                          "type": "integer",
                          "maximum": 20,
                          "description": "Type number of gift voucher, overrides the default of 1 (1 - 20)"
                        },
                        "gvEmail": {
                          "type": "string",
                          "description": "Override Customer email or assign if no email for customer exists."
                        },
                        "gvName": {
                          "type": "string",
                          "description": "Override Customer/Guest name or assign as a gifted voucher (the TO: field of a gift voucher)."
                        }
                      },
                      "required": [
                        "lineType"
                      ]
                    }
                  }
                },
                "required": [
                  "pos",
                  "orderPayment",
                  "orderLines"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully added sale transaction #{posAudit}-{posNumber}"
          },
          "400": {
            "description": "Failed to insert new order"
          },
          "406": {
            "description": "Failed to accept {paymentMethod}"
          },
          "409": {
            "description": "Order already exists"
          }
        }
      }
    },
    "/webproducts/all": {
      "get": {
        "tags": [
          "webstore"
        ],
        "summary": "Get all Products",
        "description": "Returns all products in pos system that have been marked as WebStore products",
        "operationId": "getWebProducts",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Results of all products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "maxLength": 16,
                        "type": "string"
                      },
                      "shortDescription": {
                        "maxLength": 30,
                        "type": "string"
                      },
                      "longDescription": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "taxed": {
                        "type": "boolean"
                      },
                      "isVariant": {
                        "type": "boolean"
                      },
                      "variantMasterCode": {
                        "type": "string"
                      },
                      "notes": {
                        "type": "string"
                      }
                    }
                  }
                },
                "examples": {
                  "Standard Result": {
                    "value": [
                      {
                        "code": "string",
                        "shortDescription": "string",
                        "longDescription": "string",
                        "taxed": true,
                        "isVariant": true,
                        "variantMasterCode": "string",
                        "notes": "string"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameter"
          }
        }
      }
    },
    "/webproducts/all/{startId}/{quantity}": {
      "get": {
        "tags": [
          "webstore"
        ],
        "summary": "Get all Products paged",
        "description": "Returns all products in pos system pagenated that have been marked as WebStore products",
        "operationId": "getWebProductsPaged",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          },
          {
            "name": "startId",
            "in": "path",
            "description": "Start Product ID (Start at 0 as ID's are NOT returned)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "path",
            "description": "Page size in Product numbers",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Results of all products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "AllWebProducts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "maxLength": 16,
                            "type": "string"
                          },
                          "shortDescription": {
                            "maxLength": 30,
                            "type": "string"
                          },
                          "longDescription": {
                            "maxLength": 100,
                            "type": "string"
                          },
                          "taxed": {
                            "type": "boolean"
                          },
                          "isVariant": {
                            "type": "boolean"
                          },
                          "variantMasterCode": {
                            "type": "string"
                          },
                          "notes": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "PagingMeta": {
                      "type": "object",
                      "x-examples": {
                        "Standard Response": {
                          "total": 5874,
                          "startId": 0,
                          "endId": 1025,
                          "fetchQuantity": 1000
                        }
                      },
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "Total number of items within page pool"
                        },
                        "startId": {
                          "type": "integer",
                          "description": "Start ID that was requested"
                        },
                        "endId": {
                          "type": "integer",
                          "description": "Final ID in returned page (to use in next page request start ID)"
                        },
                        "fetchQuantity": {
                          "type": "integer",
                          "description": "Total number of items returned (if less than the requested quantity then completed)"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameter"
          }
        }
      }
    },
    "/webproducts/prices/all": {
      "get": {
        "tags": [
          "webstore"
        ],
        "summary": "Get all Product prices",
        "description": "Returns all products prices in pos system that have been marked as WebStore products, according to Price Levels defined in POS system",
        "operationId": "getWebProductsPrices",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Results of all products pricing values",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "maxLength": 16,
                        "type": "string",
                        "description": "POS code of product"
                      },
                      "priceLevel": {
                        "type": "number",
                        "format": "integer",
                        "maximum": 12,
                        "description": "POS defined Price Level (1 - 12)"
                      },
                      "price": {
                        "type": "number",
                        "format": "decimal",
                        "description": "Price of product set in POS system at specified Price Level"
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": [
                      {
                        "code": "string",
                        "priceLevel": 1,
                        "price": 2.4
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameter"
          }
        }
      }
    },
    "/webproducts/prices/{level}": {
      "get": {
        "tags": [
          "webstore"
        ],
        "summary": "Get Product prices by Level",
        "description": "Returns all products prices in pos system that have been marked as WebStore products, according to Price Level requested''",
        "operationId": "getWebProductsPricesByLevel",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          },
          {
            "name": "level",
            "in": "path",
            "description": "Price Level code of product prices to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Results of all products pricing values",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "maxLength": 16,
                        "type": "string",
                        "description": "POS code of product"
                      },
                      "priceLevel": {
                        "type": "number",
                        "format": "integer",
                        "maximum": 12,
                        "description": "POS defined Price Level (1 - 12)"
                      },
                      "price": {
                        "type": "number",
                        "format": "decimal",
                        "description": "Price of product set in POS system at specified Price Level"
                      }
                    }
                  }
                },
                "examples": {
                  "Standard Response": {
                    "value": [
                      {
                        "code": "string",
                        "priceLevel": 1,
                        "price": 2.4
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameter"
          }
        }
      }
    },
    "/webproducts/quantity/all": {
      "get": {
        "tags": [
          "webstore"
        ],
        "summary": "Get all Product quantities",
        "description": "Returns all products inventory levels in pos system that have been marked as WebStore products",
        "operationId": "getWebProductsQuantities",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Results of all products stock levels",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "maxLength": 16,
                        "type": "string",
                        "description": "POS code of product"
                      },
                      "location": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "quantity": {
                        "type": "number",
                        "format": "decimal"
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": [
                      {
                        "location": 1,
                        "code": "string",
                        "quantity": 34
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameter"
          }
        }
      }
    },
    "/webproducts/quantity/{location}": {
      "get": {
        "tags": [
          "webstore"
        ],
        "summary": "Get all Product quantities by Location",
        "description": "Returns all products inventory levels in pos system that have been marked as WebStore products from specific Location",
        "operationId": "getWebProductsQuantitiesByLocation",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          },
          {
            "name": "location",
            "in": "path",
            "description": "Location code of product quantities to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Results of all products stock levels",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "maxLength": 16,
                        "type": "string",
                        "description": "POS code of product"
                      },
                      "location": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "quantity": {
                        "type": "number",
                        "format": "decimal"
                      }
                    }
                  }
                },
                "examples": {
                  "Standard Response": {
                    "value": [
                      {
                        "location": 1,
                        "code": "string",
                        "quantity": 34
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameter"
          }
        }
      }
    },
    "/webproducts/specialprices/all": {
      "get": {
        "tags": [
          "webstore"
        ],
        "summary": "Get all Product special prices",
        "description": "Returns all products special prices in pos system that have been marked as WebStore products",
        "operationId": "getWebProductsSpecialPrices",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Results of all products special pricing values",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "maxLength": 16,
                        "type": "string",
                        "description": "POS code of product"
                      },
                      "special": {
                        "type": "string",
                        "enum": [
                          "SPECIAL_PRICE",
                          "PROMOTION"
                        ],
                        "description": "POS defined type of special price"
                      },
                      "specialCode": {
                        "type": "number",
                        "format": "integer",
                        "description": "POS defined code (sequential number system generated by Promotions, Special prices User-Defined)"
                      },
                      "quantityToTrip": {
                        "type": "number",
                        "format": "integer",
                        "default": 1,
                        "description": "Number of items needed to be within sale to cause special price to be used"
                      },
                      "deal": {
                        "type": "string",
                        "enum": [
                          "OVERALL_PRICE",
                          "DOLLAR_DISCOUNT",
                          "PERCENT_DISCOUNT",
                          "PRICE_PER",
                          "BONUS_PRODUCT",
                          "CHEAPEST_ITEM_PERCENT_DISCOUNT",
                          "EXPENSIVE_ITEM_PERCENT_DISCOUNT",
                          "DOLLAR_OFF_TOTAL"
                        ],
                        "default": "OVERALL_PRICE",
                        "description": "How the special price is applied"
                      },
                      "value": {
                        "oneOf": [
                          {
                            "type": "number",
                            "format": "decimal",
                            "description": "Value that the special is. Can be a price (in decimal format)"
                          },
                          {
                            "type": "string",
                            "description": "Product Code in case of BONUS_PRODUCT"
                          }
                        ]
                      },
                      "dateStart": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start date and time of the special"
                      },
                      "dateEnd": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "timeStart": {
                        "type": "string",
                        "format": "time",
                        "description": "Start time of the special when implementing 'recurring'"
                      },
                      "timeEnd": {
                        "type": "string",
                        "format": "time",
                        "description": "End time of the special when implementing 'recurring'"
                      },
                      "recurring": {
                        "type": "string",
                        "enum": [
                          "SESSION",
                          "DAILY",
                          "DAYS_OF_WEEK",
                          "WEEKLY",
                          "MONTHLY",
                          "YEARLY"
                        ],
                        "description": "Used to set DAILY, WEEKLY, MONTHLY, YEARLY recurrence type. DAYS_OF_WEEK to define specific day/days of week"
                      },
                      "interval": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "recurring": {
                              "type": "string",
                              "enum": [
                                "SESSION",
                                "DAILY",
                                "DAYS_OF_WEEK",
                                "WEEKLY",
                                "MONTHLY",
                                "YEARLY",
                                "CUSTOM"
                              ]
                            },
                            "value": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "array",
                                  "items": {}
                                }
                              ],
                              "description": "Associated value for recurring occurance of.\nIt is possible to \"mix and match\" or have multiples of same type.  \n\nA `SESSION` (1 - 5) as custom defined in the POS system  \nValid values; ```S1, S2, S3, S4, S5```  \n\nA `DAILY` value allows defining the special to occur a set # of recurring days, a value of 1 means each day, a value of 2 means every 2nd day and so on.  \nValid values; ```D1, D2, D3, D4, D5, D6...```  \n\nA `DAYS_OF_WEEK` value allows to define set day or days of the week that the special will apply.  \nValid values; ```MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY```  \n\nA `WEEKLY` value allows defining the special to occur a set # of recurring weeks, a value of 1 means every week from start date, a value of 2 means every 2nd week from start date. Usually used in conjuction with `DAYS_OF_WEEK`.  \nValid values; ```W1, W2, W3, W4, W5, W6...```  \n\nA `MONTHLY` value allows defining the special to occur a set # of recurring months, a value of 1 means every week from start date, a value of 2 means every 2nd week from start date. Usually used in conjuction with `DAYS_OF_WEEK` and/or `WEEKLY`.  \nValid values; ```M1, M2, M3, M4, M5, M6, M7, M7, M8, M9, M10, M11, M12```  \n\nA `YEARLY` value allows defining the special to occur a set # of recurring years, a value of 1 means every week from start date, a value of 2 means every 2nd week from start date. Usually used in conjuction with `DAYS_OF_WEEK` and/or `WEEKLY`, and/or `MONTHLY`.  \nValid values; ```Y1, Y2, Y3, Y4, Y5, Y6...```  \n\nA `CUSTOM` defined value allows specific pre-defined (by cache.bi) intervals, usually days of significance.  \nValid values; ```FIRST_OF_MONTH, LAST_OF_MONTH, PUBLIC_HOLIDAYS, LONG_WEEKENDS, CHRISTMAS_EVE, CHRISTMAS_DAY, NEW_YEARS_EVE, NEW_YEARS_DAY```\n"
                            }
                          }
                        }
                      }
                    },
                    "x-examples": {
                      "Promotion": {
                        "code": "WEBITEM1",
                        "specialCode": 34,
                        "special": "PROMOTION",
                        "quantityToTrip": 2,
                        "deal": "OVERALL_PRICE",
                        "value": "4.00",
                        "dateStart": "2019-08-24 04:15:22",
                        "dateEnd": "2020-08-24 04:15:22"
                      },
                      "Special Price": {
                        "code": "WEBITEM1",
                        "specialCode": 100,
                        "special": "SPECIAL",
                        "value": "2.20",
                        "dateStart": "2019-08-24 04:15:22",
                        "dateEnd": "2020-08-24 04:15:22"
                      },
                      "Promotion Bonus Item": {
                        "code": "WEBITEM1",
                        "special": "PROMOTION",
                        "quantityToTrip": 2,
                        "deal": "BONUS_PRODUCT",
                        "value": "4.00",
                        "dateStart": "2019-08-24 04:15:22",
                        "dateEnd": "2020-08-24 04:15:22"
                      }
                    }
                  }
                },
                "examples": {
                  "Promotion": {
                    "value": [
                      {
                        "code": "WEBITEM1",
                        "specialCode": 34,
                        "special": "PROMOTION",
                        "quantityToTrip": 2,
                        "deal": "OVERALL_PRICE",
                        "value": "4.00",
                        "dateStart": "2019-08-24 04:15:22",
                        "dateEnd": "2020-08-24 04:15:22"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameter"
          }
        }
      }
    },
    "/webproduct/{code}": {
      "get": {
        "tags": [
          "webstore"
        ],
        "summary": "Get Product by code",
        "description": "Return product in pos system with specified code",
        "operationId": "getWebProduct",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
            "description": "Subscription ID as given by cache.bi portal, unique to each business",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "in": "header",
            "name": "X-API-KEY",
            "description": "Unique API KEY generated by cache.bi portal",
            "required": true
          },
          {
            "name": "code",
            "in": "path",
            "description": "WebProduct code to be searched for",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results matching code",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "maxLength": 16,
                        "type": "string"
                      },
                      "shortDescription": {
                        "maxLength": 30,
                        "type": "string"
                      },
                      "longDescription": {
                        "maxLength": 100,
                        "type": "string"
                      },
                      "taxed": {
                        "type": "boolean"
                      },
                      "isVariant": {
                        "type": "boolean"
                      },
                      "variantMasterCode": {
                        "type": "string"
                      },
                      "notes": {
                        "type": "string"
                      },
                      "prices": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "priceLevel": {
                              "type": "number",
                              "format": "integer",
                              "maximum": 12,
                              "description": "POS defined Price Level (1 - 12)"
                            },
                            "price": {
                              "type": "number",
                              "format": "decimal",
                              "description": "Price of product set in POS system at specified Price Level"
                            }
                          }
                        }
                      },
                      "quantity": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "location": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "quantity": {
                              "type": "number",
                              "format": "decimal"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": [
                      {
                        "code": "CD2401",
                        "shortDescription": "Some Sample Product",
                        "longDescription": "A very long description of the sample product",
                        "taxed": true,
                        "isVariant": false,
                        "variantMasterCode": "null",
                        "notes": "null",
                        "prices": [
                          {
                            "level": 1,
                            "price": 20
                          }
                        ],
                        "quantity": [
                          {
                            "location": 1,
                            "quantity": 35
                          },
                          {
                            "location": 2,
                            "quantity": 0
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad input parameter"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Customer": {
        "type": "object",
        "description": "Customer object containing fields associated with a POS Customer.\n\nHidden Values  \nIt is possible to use any field in POS, over and above what is defined below in a `POST` request. Most common fields are included here,\nthough there are many more available (eg; `userDefinedText1 - 10`, `dob`, `dob2` etc). Please contact your POS vender to obtain a full list.\n",
        "properties": {
          "uniqueId": {
            "type": "integer",
            "description": "The unique identifier of a Customer          \nIgnored in `POST` or `PUT` requests. Returned on all `GET` and `POST` requests.\nPOS may use the same email for multiple accounts, or change email/code of a Customer.  \nThe `uniqueId` is provided as part of the response to creating a Customer through this api or by searching or requesting \nfull Customer list.\n"
          },
          "code": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string",
            "description": "#### POS Code for customer  \n\n**Required** only on `POST` requests. Returned on all `GET` requests.  \n- Must be **unique**. If code supplied already exists a `Conflict in parameter - Customer code: {code} already exists \nas Customer code for Customer ID: #` error will be returned  \n- **Special characters** will result in `Bad input parameter - customerCode must not contain special character` error  \n- **Leading numeric 0** will result in `Bad input parameter - customerCode index 0 must not be numeric 0` error\n"
          },
          "lastName": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string",
            "description": "#### Customer last name          \n**Required** only on `POST` requests. Returned on all `GET` requests.\n"
          },
          "email": {
            "maxLength": 50,
            "type": "string",
            "description": "#### Customer email address  \n- May return `Bad input parameter - Customer email: {email} does not appear to be a valid email, or does not pass spam check`\nif API flags as spam.\n"
          },
          "type": {
            "minimum": 1,
            "type": "integer",
            "description": "#### Default Type\n- Defined in Customer Type within User-Defined in POS System. Leaving type out will result in default type defined there.\nOverride with value between 1 - 9999 to NOT use the system default.\n"
          },
          "firstName": {
            "maxLength": 15,
            "type": "string"
          },
          "scanCode": {
            "maxLength": 13,
            "type": "string",
            "description": "#### POS scan code or other unique code for customer   \n- Must be **unique**.  \n- If `scanCode` exists as a Customer Code or scan code a `Conflict in parameter - Customer scan code: {scanCode} already exists as Customer code \nfor Customer ID: #` error will be returned.  \n- If `scanCode` exists as a Stock Item Code `Conflict in parameter - Customer scan code: {scanCode} already exists as Stock Code\nfor Stock Item: {code}` error will be returned.\n"
          },
          "phone": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string"
          },
          "company": {
            "maxLength": 40,
            "type": "string"
          },
          "contactNo": {
            "maxLength": 20,
            "type": "string"
          },
          "comments1": {
            "maxLength": 50,
            "type": "string"
          },
          "comments2": {
            "maxLength": 50,
            "type": "string"
          },
          "points": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "discontinue": {
            "type": "boolean",
            "default": false
          },
          "asAbove": {
            "type": "boolean",
            "default": true,
            "description": "Assigns the standard address as also the delivery address, leave delivery address blank and assign asAbove as true if delivery address is not different to customer address"
          },
          "masterAccount": {
            "maxLength": 16,
            "type": "string"
          },
          "creditLimit": {
            "type": "number",
            "format": "double",
            "description": "Customer credit limit\n`POST` values must be integers, `GET` responses will be doubles.\n",
            "default": 0
          },
          "address1": {
            "type": "string",
            "maxLength": 35
          },
          "address2": {
            "type": "string",
            "maxLength": 35
          },
          "suburb": {
            "type": "string",
            "maxLength": 35
          },
          "state": {
            "type": "string",
            "maxLength": 3
          },
          "postCode": {
            "type": "string",
            "maxLength": 10
          },
          "deliveryAddress1": {
            "type": "string",
            "maxLength": 35
          },
          "deliveryAddress2": {
            "type": "string",
            "maxLength": 35
          },
          "deliverySuburb": {
            "type": "string",
            "maxLength": 35
          },
          "deliveryState": {
            "type": "string",
            "maxLength": 3
          },
          "deliveryPostcode": {
            "type": "string",
            "maxLength": 10
          }
        },
        "required": [
          "code",
          "lastName"
        ]
      },
      "CustomerPaged": {
        "type": "object",
        "properties": {
          "Customer": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Customer object containing fields associated with a POS Customer.\n\nHidden Values  \nIt is possible to use any field in POS, over and above what is defined below in a `POST` request. Most common fields are included here,\nthough there are many more available (eg; `userDefinedText1 - 10`, `dob`, `dob2` etc). Please contact your POS vender to obtain a full list.\n",
              "properties": {
                "uniqueId": {
                  "type": "integer",
                  "description": "The unique identifier of a Customer          \nIgnored in `POST` or `PUT` requests. Returned on all `GET` and `POST` requests.\nPOS may use the same email for multiple accounts, or change email/code of a Customer.  \nThe `uniqueId` is provided as part of the response to creating a Customer through this api or by searching or requesting \nfull Customer list.\n"
                },
                "code": {
                  "maxLength": 10,
                  "minLength": 1,
                  "type": "string",
                  "description": "#### POS Code for customer  \n\n**Required** only on `POST` requests. Returned on all `GET` requests.  \n- Must be **unique**. If code supplied already exists a `Conflict in parameter - Customer code: {code} already exists \nas Customer code for Customer ID: #` error will be returned  \n- **Special characters** will result in `Bad input parameter - customerCode must not contain special character` error  \n- **Leading numeric 0** will result in `Bad input parameter - customerCode index 0 must not be numeric 0` error\n"
                },
                "lastName": {
                  "maxLength": 30,
                  "minLength": 1,
                  "type": "string",
                  "description": "#### Customer last name          \n**Required** only on `POST` requests. Returned on all `GET` requests.\n"
                },
                "email": {
                  "maxLength": 50,
                  "type": "string",
                  "description": "#### Customer email address  \n- May return `Bad input parameter - Customer email: {email} does not appear to be a valid email, or does not pass spam check`\nif API flags as spam.\n"
                },
                "type": {
                  "minimum": 1,
                  "type": "integer",
                  "description": "#### Default Type\n- Defined in Customer Type within User-Defined in POS System. Leaving type out will result in default type defined there.\nOverride with value between 1 - 9999 to NOT use the system default.\n"
                },
                "firstName": {
                  "maxLength": 15,
                  "type": "string"
                },
                "scanCode": {
                  "maxLength": 13,
                  "type": "string",
                  "description": "#### POS scan code or other unique code for customer   \n- Must be **unique**.  \n- If `scanCode` exists as a Customer Code or scan code a `Conflict in parameter - Customer scan code: {scanCode} already exists as Customer code \nfor Customer ID: #` error will be returned.  \n- If `scanCode` exists as a Stock Item Code `Conflict in parameter - Customer scan code: {scanCode} already exists as Stock Code\nfor Stock Item: {code}` error will be returned.\n"
                },
                "phone": {
                  "maxLength": 20,
                  "minLength": 1,
                  "type": "string"
                },
                "company": {
                  "maxLength": 40,
                  "type": "string"
                },
                "contactNo": {
                  "maxLength": 20,
                  "type": "string"
                },
                "comments1": {
                  "maxLength": 50,
                  "type": "string"
                },
                "comments2": {
                  "maxLength": 50,
                  "type": "string"
                },
                "points": {
                  "type": "integer",
                  "format": "int32",
                  "default": 0
                },
                "discontinue": {
                  "type": "boolean",
                  "default": false
                },
                "asAbove": {
                  "type": "boolean",
                  "default": true,
                  "description": "Assigns the standard address as also the delivery address, leave delivery address blank and assign asAbove as true if delivery address is not different to customer address"
                },
                "masterAccount": {
                  "maxLength": 16,
                  "type": "string"
                },
                "creditLimit": {
                  "type": "number",
                  "format": "double",
                  "description": "Customer credit limit\n`POST` values must be integers, `GET` responses will be doubles.\n",
                  "default": 0
                },
                "address1": {
                  "type": "string",
                  "maxLength": 35
                },
                "address2": {
                  "type": "string",
                  "maxLength": 35
                },
                "suburb": {
                  "type": "string",
                  "maxLength": 35
                },
                "state": {
                  "type": "string",
                  "maxLength": 3
                },
                "postCode": {
                  "type": "string",
                  "maxLength": 10
                },
                "deliveryAddress1": {
                  "type": "string",
                  "maxLength": 35
                },
                "deliveryAddress2": {
                  "type": "string",
                  "maxLength": 35
                },
                "deliverySuburb": {
                  "type": "string",
                  "maxLength": 35
                },
                "deliveryState": {
                  "type": "string",
                  "maxLength": 3
                },
                "deliveryPostcode": {
                  "type": "string",
                  "maxLength": 10
                }
              },
              "required": [
                "code",
                "lastName"
              ]
            }
          },
          "PagingMeta": {
            "type": "object",
            "x-examples": {
              "Standard Response": {
                "total": 5874,
                "startId": 0,
                "endId": 1025,
                "fetchQuantity": 1000
              }
            },
            "properties": {
              "total": {
                "type": "integer",
                "description": "Total number of items within page pool"
              },
              "startId": {
                "type": "integer",
                "description": "Start ID that was requested"
              },
              "endId": {
                "type": "integer",
                "description": "Final ID in returned page (to use in next page request start ID)"
              },
              "fetchQuantity": {
                "type": "integer",
                "description": "Total number of items returned (if less than the requested quantity then completed)"
              }
            }
          }
        }
      },
      "GiftVoucher": {
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 16,
            "type": "string",
            "description": "\n"
          },
          "site": {
            "maximum": 99,
            "type": "integer",
            "description": "Assigning as 0 will indicate gift voucher is redeemable at all sites (AllowGlobalRedemption = true)",
            "default": 0
          },
          "amount": {
            "type": "number",
            "format": "decimal"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Override of system datetime now. Date time of voucher purchased, in UTC time, will be converted to time-zone pos is in"
          },
          "dateExpires": {
            "type": "string",
            "format": "date-time",
            "description": "Override of system Type1 Gift Voucher Expiry. Date time of voucher expiry, in UTC time, will be converted to time-zone pos is in"
          },
          "amountRedeemed": {
            "type": "number",
            "format": "decimal"
          },
          "name": {
            "maxLength": 30,
            "type": "string"
          },
          "gvType": {
            "maximum": 99,
            "minimum": 1,
            "type": "integer"
          },
          "email": {
            "maxLength": 30,
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "x-examples": {
          "Standard": {
            "code": "9846573893746",
            "site": 0,
            "amount": 50,
            "date": "2019-08-24 14:15:22",
            "dateExpires": "2022-08-24 14:15:22",
            "amountRedeemed": 0,
            "name": "Dr Strange",
            "gvType": 1,
            "email": "drstrange@gmail.com"
          }
        }
      },
      "WebOrder": {
        "type": "object",
        "x-examples": {
          "Guest Web Customer": {
            "code": 6203,
            "pos": 1,
            "customerId": 0,
            "guestCustomer": {
              "address1": "22 Greenhill Rd",
              "suburb": "Wayville",
              "state": "SA",
              "postCode": 5034,
              "name": "King Bore"
            },
            "orderPayment": {
              "paymentAmt": 19.95,
              "paymentMethod": "WEB"
            },
            "orderLines": {
              "type": "ITEM",
              "itemCode": "PUM500",
              "description": "PUMICE POWDER 500G",
              "quantity": 1,
              "totalPrice": 19.95
            }
          },
          "Registered Customer": {
            "code": 6204,
            "pos": 1,
            "customerId": 34,
            "orderPayment": {
              "pointsEarned": 54,
              "paymentAmt": 54.9,
              "paymentMethod": "WEB"
            },
            "orderLines": [
              {
                "type": "ITEM",
                "itemCode": "PUM500",
                "description": "PUMICE POWDER 500G",
                "quantity": 1,
                "totalPrice": 19.95
              },
              {
                "type": "ITEM",
                "itemCode": "PUM1000",
                "description": "PUMICE POWDER 1Kg",
                "quantity": 1,
                "totalPrice": 34.95
              }
            ]
          },
          "Registered Customer Points Spend": {
            "code": 6204,
            "pos": 1,
            "customerId": 34,
            "orderPayment": {
              "pointsEarned": 54,
              "pointsRedeemed": 5500,
              "paymentAmt": 54.9,
              "paymentMethod": "POINTS"
            },
            "orderLines": [
              {
                "type": "ITEM",
                "itemCode": "PUM500",
                "description": "PUMICE POWDER 500G",
                "quantity": 1,
                "totalPrice": 19.95
              },
              {
                "type": "ITEM",
                "itemCode": "PUM1000",
                "description": "PUMICE POWDER 1Kg",
                "quantity": 1,
                "totalPrice": 34.95
              }
            ]
          },
          "Cash Customer Delivery": {
            "code": 6203,
            "pos": 1,
            "guestCustomer": {
              "address1": "22 Greenhill Rd",
              "suburb": "Wayville",
              "state": "SA",
              "postCode": 5034,
              "name": "King Bore"
            },
            "orderPayment": {
              "paymentAmt": 19.95,
              "paymentMethod": "WEB"
            },
            "orderLines": {
              "type": "ITEM",
              "itemCode": "PUM500",
              "description": "PUMICE POWDER 500G",
              "quantity": 1,
              "totalPrice": 19.95
            }
          },
          "Cash Customer Pick-Up": {
            "code": 6203,
            "pos": 1,
            "guestCustomer": {
              "name": "King Bore"
            },
            "orderPayment": {
              "paymentAmt": 19.95,
              "paymentMethod": "WEB"
            },
            "orderLines": {
              "type": "ITEM",
              "itemCode": "PUM500",
              "description": "PUMICE POWDER 500G",
              "quantity": 1,
              "totalPrice": 19.95
            }
          }
        },
        "properties": {
          "code": {
            "type": "string",
            "description": "Web Order code or reference number, system will prefix with \"WEB ORDER \". Suggested to use a code unique to web system to allow cross-referencing/debugging"
          },
          "pos": {
            "type": "integer",
            "description": "Pos number to put the sale against. Pos number MUST exist in POS Terminal settings."
          },
          "deliveryDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date that the finished order is to be available in UTC time, will be converted to time-zone pos is in."
          },
          "customerId": {
            "type": "integer",
            "description": "Assigning as 0 will use non-registered customer (Guest) - POS will create if not exists, pos code of WGUEST''. Any other number must be of the id of customer in POS system (NOT code)."
          },
          "clerkCode": {
            "type": "integer",
            "description": "Will assign automatically as designated Web Store clerk in POS, can override using desired clerk code here."
          },
          "guestCustomer": {
            "type": "object",
            "properties": {
              "address1": {
                "type": "string",
                "maxLength": 35,
                "description": "Delivery address1 for Guest Customer"
              },
              "address2": {
                "type": "string",
                "maxLength": 35,
                "description": "Delivery address2 for web Guest Customer"
              },
              "suburb": {
                "type": "string",
                "maxLength": 35,
                "description": "Suburb for web Guest Customer"
              },
              "state": {
                "type": "string",
                "maxLength": 3,
                "description": "State for web Guest Customer"
              },
              "postCode": {
                "type": "string",
                "maxLength": 10,
                "description": "Post Code for web Guest Customer"
              },
              "name": {
                "type": "string",
                "maxLength": 35,
                "description": "Name of web Guest Customer and in-store (Pick-Up/Order-In) customers (through a customer facing app)"
              }
            }
          },
          "orderPayment": {
            "type": "array",
            "description": "Payment lines broken into payment methods (total is part payable in multiple tender types) - NOT REQUIRED for /weborder/unpaid",
            "items": {
              "type": "object",
              "description": "### OrderPayment - Tender Types and Amounts of a finalised transaction\nOrders may be paid entirely by one method, or by using several methods. So long as the cumulative total is equal to the total amount of `OrderLines` `amount` value.  \n\n#### Payment Method Options \nWhilst it is possible to use the exact Tender value from POS (T1...T18) it is recommended to use the preset values that are defined using User-Defined or Gloabl Option Settings in POS rather than the direct value.\n- `WEB` Will use the value assigned as `Web Order Tender` within POS Global Options \"eCommerce Interface\" section for web payments\n- `POINTS` Will use POS set `Points Tender` within Global Options Customer Tab \"miscellaneous\" section for Points tenders\n- `VOUCHER` Will use `User-Defined` value for Web Voucher Tender\n- `ACCOUNT` Will use the POS set `Account Tender` (will only allow tendering if credit is available on account along with the Customer being an Account Type Customer)\nUsing the above preset values ensure that nuances with each tender is followed (eg; `ACCOUNT` will check for available credit etc)  \nThe body of the request only needs the values that are required for each Payment Method.\n",
              "x-examples": {
                "Gift Voucher Payment": {
                  "OrderPayment": [
                    {
                      "paymentAmt": 20.95,
                      "paymentMethod": "VOUCHER",
                      "code": "GV9045763542867"
                    }
                  ]
                },
                "Online Payment": {
                  "OrderPayment": [
                    {
                      "paymentAmt": 20.95,
                      "paymentMethod": "WEB"
                    }
                  ]
                },
                "Points Payment": {
                  "OrderPayment": [
                    {
                      "pointsRedeemed": 2095,
                      "paymentAmt": 20.95,
                      "paymentMethod": "POINTS"
                    }
                  ]
                },
                "Split Payment": {
                  "OrderPayment": [
                    {
                      "pointsEarned": 34,
                      "paymentAmt": 34,
                      "paymentMethod": "WEB"
                    },
                    {
                      "pointsRedeemed": 5000,
                      "paymentAmt": 50,
                      "paymentMethod": "POINTS"
                    }
                  ]
                },
                "Account Payment": {
                  "OrderPayment": [
                    {
                      "paymentAmt": 20.95,
                      "paymentMethod": "ACCOUNT"
                    }
                  ]
                }
              },
              "properties": {
                "pointsEarned": {
                  "type": "number",
                  "format": "integer",
                  "description": "Number of points earned on transaction"
                },
                "pointsRedeemed": {
                  "type": "number",
                  "format": "integer",
                  "description": "Number of points redemeed at checkout"
                },
                "paymentAmt": {
                  "type": "number",
                  "format": "double",
                  "description": "Amount tendered by payment method including any GST"
                },
                "paymentMethod": {
                  "type": "string",
                  "description": "Tender used to a payment. Note: T1...T18 are NOT recommended to use as it implies a perfect relationship with pos",
                  "enum": [
                    "WEB",
                    "POINTS",
                    "VOUCHER",
                    "ACCOUNT",
                    "T1...T18"
                  ]
                },
                "code": {
                  "type": "string",
                  "description": "Gift voucher code used for payment, including prefix `GV`"
                }
              },
              "required": [
                "paymentAmt",
                "paymentMethod"
              ]
            }
          },
          "orderedDate": {
            "type": "string",
            "format": "date-time",
            "description": "Use of this will affect financials.  \nRemoved from v1.0.25 by way of ignoring any value here.  \nAPI will always use POS time of successful insertion of order.\nDate that order takes place, override for system generated \"now\" -  in UTC time, will be converted to time-zone pos is in\n",
            "deprecated": true
          },
          "orderLines": {
            "type": "array",
            "description": "Line by line of order. Instruction items must follow an Item line. Text may be anywhere",
            "items": {
              "type": "object",
              "x-examples": {
                "Item Order": {
                  "lineType": "ITEM",
                  "itemCode": "I45-JG",
                  "description": "Canvas Item size 45",
                  "quantity": 2,
                  "totalPrice": 45.8
                },
                "New Gift Voucher": {
                  "lineType": "VOUCHER",
                  "itemCode": "WB09456983493",
                  "description": "WEB GIFT VOUCHER",
                  "totalPrice": 50,
                  "gvSite": 0,
                  "gvExpiryDays": 1096,
                  "gvEmail": "test@example.com.au",
                  "gvName": "George Test"
                },
                "Free Type Text": {
                  "lineType": "TEXT",
                  "description": "That line above was a gift voucher"
                },
                "Discount": {
                  "lineType": "DISCOUNT",
                  "totalPrice": -1.33
                }
              },
              "description": "Lines of the order, containing items sold along with codes, quantities and pricing. Also used for free text within the transaction and selling of a Gift Voucher and giving an item discount (pertains to item in line above the discount)",
              "properties": {
                "lineType": {
                  "type": "string",
                  "format": "enum [ITEM, INSTRUCTION, TEXT, VOUCHER, DISCOUNT]",
                  "description": "`ITEM`: A product found on the WebProduct list of items  \n`INSTRUCTION`: A product found on the WebProduct list of items that is instructable to the `ITEM` in line above it  \n`TEXT`: Instructive text  \n`VOUCHER`: A gift voucher  \n`DISCOUNT`: A discount relating to the item of the line above it\n",
                  "enum": [
                    "ITEM",
                    "INSTRUCTION",
                    "TEXT",
                    "VOUCHER",
                    "DISCOUNT"
                  ]
                },
                "itemCode": {
                  "type": "string",
                  "description": "Dependant on `lineType` used:  \n`ITEM` <span style=\"color:red\">required</span> - POS code of product (MUST exist in WebProduct)  \n`VOUCHER` <span style=\"color:red\">required</span> - New Gift Voucher code\nAll other `lineTypes` do not require this feild and should be left out (see examples)\n"
                },
                "description": {
                  "type": "string",
                  "maxLength": 30,
                  "description": "Dependant on `lineType` used:  \n`ITEM` <span style=\"color:red\">required</span> - POS description of product (preferable to use value in WebProduct so as to match POS internal descriptions)  \n`VOUCHER` <span style=\"color:red\">required</span> - A Gift Voucher description, to suit type of voucher in WebStore  \n`TEXT` <span style=\"color:red\">required</span> - Free type text (must be an `ITEM` `lineType` above to ensure prints to kitchen printers)\n"
                },
                "quantity": {
                  "type": "number",
                  "format": "decimal"
                },
                "totalPrice": {
                  "type": "number",
                  "format": "decimal",
                  "description": "The TOTAL price of all items within the sale(quantity * unit price)"
                },
                "orderedTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "If different to original order (not used currently) in UTC time, will be converted to time-zone pos is in''"
                },
                "gvSite": {
                  "type": "integer",
                  "description": "Override default value of 0 (redeemable at all sites) for a new gift voucher"
                },
                "gvDate": {
                  "type": "string",
                  "description": "Override \"now\" time for timezone that pos terminal is in. Must be in UTC time"
                },
                "gvExpiryDays": {
                  "type": "string",
                  "description": "Override default value of 1096 or pos set value of voucher type 1"
                },
                "gvType": {
                  "type": "integer",
                  "maximum": 20,
                  "description": "Type number of gift voucher, overrides the default of 1 (1 - 20)"
                },
                "gvEmail": {
                  "type": "string",
                  "description": "Override Customer email or assign if no email for customer exists."
                },
                "gvName": {
                  "type": "string",
                  "description": "Override Customer/Guest name or assign as a gifted voucher (the TO: field of a gift voucher)."
                }
              },
              "required": [
                "lineType"
              ]
            }
          }
        },
        "required": [
          "pos",
          "orderPayment",
          "orderLines"
        ]
      },
      "OrderPayment": {
        "type": "object",
        "description": "### OrderPayment - Tender Types and Amounts of a finalised transaction\nOrders may be paid entirely by one method, or by using several methods. So long as the cumulative total is equal to the total amount of `OrderLines` `amount` value.  \n\n#### Payment Method Options \nWhilst it is possible to use the exact Tender value from POS (T1...T18) it is recommended to use the preset values that are defined using User-Defined or Gloabl Option Settings in POS rather than the direct value.\n- `WEB` Will use the value assigned as `Web Order Tender` within POS Global Options \"eCommerce Interface\" section for web payments\n- `POINTS` Will use POS set `Points Tender` within Global Options Customer Tab \"miscellaneous\" section for Points tenders\n- `VOUCHER` Will use `User-Defined` value for Web Voucher Tender\n- `ACCOUNT` Will use the POS set `Account Tender` (will only allow tendering if credit is available on account along with the Customer being an Account Type Customer)\nUsing the above preset values ensure that nuances with each tender is followed (eg; `ACCOUNT` will check for available credit etc)  \nThe body of the request only needs the values that are required for each Payment Method.\n",
        "x-examples": {
          "Gift Voucher Payment": {
            "OrderPayment": [
              {
                "paymentAmt": 20.95,
                "paymentMethod": "VOUCHER",
                "code": "GV9045763542867"
              }
            ]
          },
          "Online Payment": {
            "OrderPayment": [
              {
                "paymentAmt": 20.95,
                "paymentMethod": "WEB"
              }
            ]
          },
          "Points Payment": {
            "OrderPayment": [
              {
                "pointsRedeemed": 2095,
                "paymentAmt": 20.95,
                "paymentMethod": "POINTS"
              }
            ]
          },
          "Split Payment": {
            "OrderPayment": [
              {
                "pointsEarned": 34,
                "paymentAmt": 34,
                "paymentMethod": "WEB"
              },
              {
                "pointsRedeemed": 5000,
                "paymentAmt": 50,
                "paymentMethod": "POINTS"
              }
            ]
          },
          "Account Payment": {
            "OrderPayment": [
              {
                "paymentAmt": 20.95,
                "paymentMethod": "ACCOUNT"
              }
            ]
          }
        },
        "properties": {
          "pointsEarned": {
            "type": "number",
            "format": "integer",
            "description": "Number of points earned on transaction"
          },
          "pointsRedeemed": {
            "type": "number",
            "format": "integer",
            "description": "Number of points redemeed at checkout"
          },
          "paymentAmt": {
            "type": "number",
            "format": "double",
            "description": "Amount tendered by payment method including any GST"
          },
          "paymentMethod": {
            "type": "string",
            "description": "Tender used to a payment. Note: T1...T18 are NOT recommended to use as it implies a perfect relationship with pos",
            "enum": [
              "WEB",
              "POINTS",
              "VOUCHER",
              "ACCOUNT",
              "T1...T18"
            ]
          },
          "code": {
            "type": "string",
            "description": "Gift voucher code used for payment, including prefix `GV`"
          }
        },
        "required": [
          "paymentAmt",
          "paymentMethod"
        ]
      },
      "OrderLines": {
        "type": "object",
        "x-examples": {
          "Item Order": {
            "lineType": "ITEM",
            "itemCode": "I45-JG",
            "description": "Canvas Item size 45",
            "quantity": 2,
            "totalPrice": 45.8
          },
          "New Gift Voucher": {
            "lineType": "VOUCHER",
            "itemCode": "WB09456983493",
            "description": "WEB GIFT VOUCHER",
            "totalPrice": 50,
            "gvSite": 0,
            "gvExpiryDays": 1096,
            "gvEmail": "test@example.com.au",
            "gvName": "George Test"
          },
          "Free Type Text": {
            "lineType": "TEXT",
            "description": "That line above was a gift voucher"
          },
          "Discount": {
            "lineType": "DISCOUNT",
            "totalPrice": -1.33
          }
        },
        "description": "Lines of the order, containing items sold along with codes, quantities and pricing. Also used for free text within the transaction and selling of a Gift Voucher and giving an item discount (pertains to item in line above the discount)",
        "properties": {
          "lineType": {
            "type": "string",
            "format": "enum [ITEM, INSTRUCTION, TEXT, VOUCHER, DISCOUNT]",
            "description": "`ITEM`: A product found on the WebProduct list of items  \n`INSTRUCTION`: A product found on the WebProduct list of items that is instructable to the `ITEM` in line above it  \n`TEXT`: Instructive text  \n`VOUCHER`: A gift voucher  \n`DISCOUNT`: A discount relating to the item of the line above it\n",
            "enum": [
              "ITEM",
              "INSTRUCTION",
              "TEXT",
              "VOUCHER",
              "DISCOUNT"
            ]
          },
          "itemCode": {
            "type": "string",
            "description": "Dependant on `lineType` used:  \n`ITEM` <span style=\"color:red\">required</span> - POS code of product (MUST exist in WebProduct)  \n`VOUCHER` <span style=\"color:red\">required</span> - New Gift Voucher code\nAll other `lineTypes` do not require this feild and should be left out (see examples)\n"
          },
          "description": {
            "type": "string",
            "maxLength": 30,
            "description": "Dependant on `lineType` used:  \n`ITEM` <span style=\"color:red\">required</span> - POS description of product (preferable to use value in WebProduct so as to match POS internal descriptions)  \n`VOUCHER` <span style=\"color:red\">required</span> - A Gift Voucher description, to suit type of voucher in WebStore  \n`TEXT` <span style=\"color:red\">required</span> - Free type text (must be an `ITEM` `lineType` above to ensure prints to kitchen printers)\n"
          },
          "quantity": {
            "type": "number",
            "format": "decimal"
          },
          "totalPrice": {
            "type": "number",
            "format": "decimal",
            "description": "The TOTAL price of all items within the sale(quantity * unit price)"
          },
          "orderedTime": {
            "type": "string",
            "format": "date-time",
            "description": "If different to original order (not used currently) in UTC time, will be converted to time-zone pos is in''"
          },
          "gvSite": {
            "type": "integer",
            "description": "Override default value of 0 (redeemable at all sites) for a new gift voucher"
          },
          "gvDate": {
            "type": "string",
            "description": "Override \"now\" time for timezone that pos terminal is in. Must be in UTC time"
          },
          "gvExpiryDays": {
            "type": "string",
            "description": "Override default value of 1096 or pos set value of voucher type 1"
          },
          "gvType": {
            "type": "integer",
            "maximum": 20,
            "description": "Type number of gift voucher, overrides the default of 1 (1 - 20)"
          },
          "gvEmail": {
            "type": "string",
            "description": "Override Customer email or assign if no email for customer exists."
          },
          "gvName": {
            "type": "string",
            "description": "Override Customer/Guest name or assign as a gifted voucher (the TO: field of a gift voucher)."
          }
        },
        "required": [
          "lineType"
        ]
      },
      "GuestCustomer": {
        "type": "object",
        "properties": {
          "address1": {
            "type": "string",
            "maxLength": 35,
            "description": "Delivery address1 for Guest Customer"
          },
          "address2": {
            "type": "string",
            "maxLength": 35,
            "description": "Delivery address2 for web Guest Customer"
          },
          "suburb": {
            "type": "string",
            "maxLength": 35,
            "description": "Suburb for web Guest Customer"
          },
          "state": {
            "type": "string",
            "maxLength": 3,
            "description": "State for web Guest Customer"
          },
          "postCode": {
            "type": "string",
            "maxLength": 10,
            "description": "Post Code for web Guest Customer"
          },
          "name": {
            "type": "string",
            "maxLength": 35,
            "description": "Name of web Guest Customer and in-store (Pick-Up/Order-In) customers (through a customer facing app)"
          }
        }
      },
      "AllWebProducts": {
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 16,
            "type": "string"
          },
          "shortDescription": {
            "maxLength": 30,
            "type": "string"
          },
          "longDescription": {
            "maxLength": 100,
            "type": "string"
          },
          "taxed": {
            "type": "boolean"
          },
          "isVariant": {
            "type": "boolean"
          },
          "variantMasterCode": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          }
        }
      },
      "AllWebProductsPaged": {
        "type": "object",
        "properties": {
          "AllWebProducts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "maxLength": 16,
                  "type": "string"
                },
                "shortDescription": {
                  "maxLength": 30,
                  "type": "string"
                },
                "longDescription": {
                  "maxLength": 100,
                  "type": "string"
                },
                "taxed": {
                  "type": "boolean"
                },
                "isVariant": {
                  "type": "boolean"
                },
                "variantMasterCode": {
                  "type": "string"
                },
                "notes": {
                  "type": "string"
                }
              }
            }
          },
          "PagingMeta": {
            "type": "object",
            "x-examples": {
              "Standard Response": {
                "total": 5874,
                "startId": 0,
                "endId": 1025,
                "fetchQuantity": 1000
              }
            },
            "properties": {
              "total": {
                "type": "integer",
                "description": "Total number of items within page pool"
              },
              "startId": {
                "type": "integer",
                "description": "Start ID that was requested"
              },
              "endId": {
                "type": "integer",
                "description": "Final ID in returned page (to use in next page request start ID)"
              },
              "fetchQuantity": {
                "type": "integer",
                "description": "Total number of items returned (if less than the requested quantity then completed)"
              }
            }
          }
        }
      },
      "AllWebProductPrices": {
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 16,
            "type": "string",
            "description": "POS code of product"
          },
          "priceLevel": {
            "type": "number",
            "format": "integer",
            "maximum": 12,
            "description": "POS defined Price Level (1 - 12)"
          },
          "price": {
            "type": "number",
            "format": "decimal",
            "description": "Price of product set in POS system at specified Price Level"
          }
        }
      },
      "AllWebProductQuantities": {
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 16,
            "type": "string",
            "description": "POS code of product"
          },
          "location": {
            "type": "integer",
            "format": "int32"
          },
          "quantity": {
            "type": "number",
            "format": "decimal"
          }
        }
      },
      "WebProduct": {
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 16,
            "type": "string"
          },
          "shortDescription": {
            "maxLength": 30,
            "type": "string"
          },
          "longDescription": {
            "maxLength": 100,
            "type": "string"
          },
          "taxed": {
            "type": "boolean"
          },
          "isVariant": {
            "type": "boolean"
          },
          "variantMasterCode": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "prices": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "priceLevel": {
                  "type": "number",
                  "format": "integer",
                  "maximum": 12,
                  "description": "POS defined Price Level (1 - 12)"
                },
                "price": {
                  "type": "number",
                  "format": "decimal",
                  "description": "Price of product set in POS system at specified Price Level"
                }
              }
            }
          },
          "quantity": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "location": {
                  "type": "integer",
                  "format": "int32"
                },
                "quantity": {
                  "type": "number",
                  "format": "decimal"
                }
              }
            }
          }
        }
      },
      "WebProductPrices": {
        "type": "object",
        "properties": {
          "priceLevel": {
            "type": "number",
            "format": "integer",
            "maximum": 12,
            "description": "POS defined Price Level (1 - 12)"
          },
          "price": {
            "type": "number",
            "format": "decimal",
            "description": "Price of product set in POS system at specified Price Level"
          }
        }
      },
      "WebProductQuantities": {
        "type": "object",
        "properties": {
          "location": {
            "type": "integer",
            "format": "int32"
          },
          "quantity": {
            "type": "number",
            "format": "decimal"
          }
        }
      },
      "WebProductSpecialPrices": {
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 16,
            "type": "string",
            "description": "POS code of product"
          },
          "special": {
            "type": "string",
            "enum": [
              "SPECIAL_PRICE",
              "PROMOTION"
            ],
            "description": "POS defined type of special price"
          },
          "specialCode": {
            "type": "number",
            "format": "integer",
            "description": "POS defined code (sequential number system generated by Promotions, Special prices User-Defined)"
          },
          "quantityToTrip": {
            "type": "number",
            "format": "integer",
            "default": 1,
            "description": "Number of items needed to be within sale to cause special price to be used"
          },
          "deal": {
            "type": "string",
            "enum": [
              "OVERALL_PRICE",
              "DOLLAR_DISCOUNT",
              "PERCENT_DISCOUNT",
              "PRICE_PER",
              "BONUS_PRODUCT",
              "CHEAPEST_ITEM_PERCENT_DISCOUNT",
              "EXPENSIVE_ITEM_PERCENT_DISCOUNT",
              "DOLLAR_OFF_TOTAL"
            ],
            "default": "OVERALL_PRICE",
            "description": "How the special price is applied"
          },
          "value": {
            "oneOf": [
              {
                "type": "number",
                "format": "decimal",
                "description": "Value that the special is. Can be a price (in decimal format)"
              },
              {
                "type": "string",
                "description": "Product Code in case of BONUS_PRODUCT"
              }
            ]
          },
          "dateStart": {
            "type": "string",
            "format": "date-time",
            "description": "Start date and time of the special"
          },
          "dateEnd": {
            "type": "string",
            "format": "date-time"
          },
          "timeStart": {
            "type": "string",
            "format": "time",
            "description": "Start time of the special when implementing 'recurring'"
          },
          "timeEnd": {
            "type": "string",
            "format": "time",
            "description": "End time of the special when implementing 'recurring'"
          },
          "recurring": {
            "type": "string",
            "enum": [
              "SESSION",
              "DAILY",
              "DAYS_OF_WEEK",
              "WEEKLY",
              "MONTHLY",
              "YEARLY"
            ],
            "description": "Used to set DAILY, WEEKLY, MONTHLY, YEARLY recurrence type. DAYS_OF_WEEK to define specific day/days of week"
          },
          "interval": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "recurring": {
                  "type": "string",
                  "enum": [
                    "SESSION",
                    "DAILY",
                    "DAYS_OF_WEEK",
                    "WEEKLY",
                    "MONTHLY",
                    "YEARLY",
                    "CUSTOM"
                  ]
                },
                "value": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "array",
                      "items": {}
                    }
                  ],
                  "description": "Associated value for recurring occurance of.\nIt is possible to \"mix and match\" or have multiples of same type.  \n\nA `SESSION` (1 - 5) as custom defined in the POS system  \nValid values; ```S1, S2, S3, S4, S5```  \n\nA `DAILY` value allows defining the special to occur a set # of recurring days, a value of 1 means each day, a value of 2 means every 2nd day and so on.  \nValid values; ```D1, D2, D3, D4, D5, D6...```  \n\nA `DAYS_OF_WEEK` value allows to define set day or days of the week that the special will apply.  \nValid values; ```MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY```  \n\nA `WEEKLY` value allows defining the special to occur a set # of recurring weeks, a value of 1 means every week from start date, a value of 2 means every 2nd week from start date. Usually used in conjuction with `DAYS_OF_WEEK`.  \nValid values; ```W1, W2, W3, W4, W5, W6...```  \n\nA `MONTHLY` value allows defining the special to occur a set # of recurring months, a value of 1 means every week from start date, a value of 2 means every 2nd week from start date. Usually used in conjuction with `DAYS_OF_WEEK` and/or `WEEKLY`.  \nValid values; ```M1, M2, M3, M4, M5, M6, M7, M7, M8, M9, M10, M11, M12```  \n\nA `YEARLY` value allows defining the special to occur a set # of recurring years, a value of 1 means every week from start date, a value of 2 means every 2nd week from start date. Usually used in conjuction with `DAYS_OF_WEEK` and/or `WEEKLY`, and/or `MONTHLY`.  \nValid values; ```Y1, Y2, Y3, Y4, Y5, Y6...```  \n\nA `CUSTOM` defined value allows specific pre-defined (by cache.bi) intervals, usually days of significance.  \nValid values; ```FIRST_OF_MONTH, LAST_OF_MONTH, PUBLIC_HOLIDAYS, LONG_WEEKENDS, CHRISTMAS_EVE, CHRISTMAS_DAY, NEW_YEARS_EVE, NEW_YEARS_DAY```\n"
                }
              }
            }
          }
        },
        "x-examples": {
          "Promotion": {
            "code": "WEBITEM1",
            "specialCode": 34,
            "special": "PROMOTION",
            "quantityToTrip": 2,
            "deal": "OVERALL_PRICE",
            "value": "4.00",
            "dateStart": "2019-08-24 04:15:22",
            "dateEnd": "2020-08-24 04:15:22"
          },
          "Special Price": {
            "code": "WEBITEM1",
            "specialCode": 100,
            "special": "SPECIAL",
            "value": "2.20",
            "dateStart": "2019-08-24 04:15:22",
            "dateEnd": "2020-08-24 04:15:22"
          },
          "Promotion Bonus Item": {
            "code": "WEBITEM1",
            "special": "PROMOTION",
            "quantityToTrip": 2,
            "deal": "BONUS_PRODUCT",
            "value": "4.00",
            "dateStart": "2019-08-24 04:15:22",
            "dateEnd": "2020-08-24 04:15:22"
          }
        }
      },
      "Intervals": {
        "type": "object",
        "properties": {
          "recurring": {
            "type": "string",
            "enum": [
              "SESSION",
              "DAILY",
              "DAYS_OF_WEEK",
              "WEEKLY",
              "MONTHLY",
              "YEARLY",
              "CUSTOM"
            ]
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              },
              {
                "type": "array",
                "items": {}
              }
            ],
            "description": "Associated value for recurring occurance of.\nIt is possible to \"mix and match\" or have multiples of same type.  \n\nA `SESSION` (1 - 5) as custom defined in the POS system  \nValid values; ```S1, S2, S3, S4, S5```  \n\nA `DAILY` value allows defining the special to occur a set # of recurring days, a value of 1 means each day, a value of 2 means every 2nd day and so on.  \nValid values; ```D1, D2, D3, D4, D5, D6...```  \n\nA `DAYS_OF_WEEK` value allows to define set day or days of the week that the special will apply.  \nValid values; ```MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY```  \n\nA `WEEKLY` value allows defining the special to occur a set # of recurring weeks, a value of 1 means every week from start date, a value of 2 means every 2nd week from start date. Usually used in conjuction with `DAYS_OF_WEEK`.  \nValid values; ```W1, W2, W3, W4, W5, W6...```  \n\nA `MONTHLY` value allows defining the special to occur a set # of recurring months, a value of 1 means every week from start date, a value of 2 means every 2nd week from start date. Usually used in conjuction with `DAYS_OF_WEEK` and/or `WEEKLY`.  \nValid values; ```M1, M2, M3, M4, M5, M6, M7, M7, M8, M9, M10, M11, M12```  \n\nA `YEARLY` value allows defining the special to occur a set # of recurring years, a value of 1 means every week from start date, a value of 2 means every 2nd week from start date. Usually used in conjuction with `DAYS_OF_WEEK` and/or `WEEKLY`, and/or `MONTHLY`.  \nValid values; ```Y1, Y2, Y3, Y4, Y5, Y6...```  \n\nA `CUSTOM` defined value allows specific pre-defined (by cache.bi) intervals, usually days of significance.  \nValid values; ```FIRST_OF_MONTH, LAST_OF_MONTH, PUBLIC_HOLIDAYS, LONG_WEEKENDS, CHRISTMAS_EVE, CHRISTMAS_DAY, NEW_YEARS_EVE, NEW_YEARS_DAY```\n"
          }
        }
      },
      "CustomerSuccess": {
        "type": "object",
        "x-examples": {
          "Standard": {
            "uniqueId": 53,
            "code": "W0000342",
            "email": "test@example.com.au"
          }
        },
        "properties": {
          "uniqueId": {
            "type": "integer"
          },
          "code": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "CustomerPointsResponse": {
        "type": "object",
        "x-examples": {
          "Standard": {
            "customerId": 54,
            "newPointsBalance": 435
          }
        },
        "properties": {
          "customerId": {
            "type": "integer"
          },
          "newPointsBalance": {
            "type": "integer"
          }
        }
      },
      "PagingMeta": {
        "type": "object",
        "x-examples": {
          "Standard Response": {
            "total": 5874,
            "startId": 0,
            "endId": 1025,
            "fetchQuantity": 1000
          }
        },
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of items within page pool"
          },
          "startId": {
            "type": "integer",
            "description": "Start ID that was requested"
          },
          "endId": {
            "type": "integer",
            "description": "Final ID in returned page (to use in next page request start ID)"
          },
          "fetchQuantity": {
            "type": "integer",
            "description": "Total number of items returned (if less than the requested quantity then completed)"
          }
        }
      }
    },
    "securitySchemes": {
      "key": {
        "type": "apiKey",
        "name": "X-API-Key",
        "in": "header",
        "description": "API Key as given by cache.bi administrator"
      },
      "subId": {
        "type": "apiKey",
        "name": "X-CBI-BUSINESS-SUBSCRIPTION-ID",
        "in": "header",
        "description": "Client subscription UUID"
      }
    }
  }
}